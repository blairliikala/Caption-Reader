{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "captions-viewer.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "/src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CaptionsViewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "./src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/captions-viewer.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "CaptionsViewer",
          "default": "class extends HTMLElement {\n  #isInit = false;\n  #divs;\n  // Params\n  #src = \"\";\n  // location of a vtt src.\n  #playhead = 0;\n  // current seconds from start.\n  #height = \"400px\";\n  // Hight of container, applied as inline style.\n  #debounce = 0;\n  // In seconds how long to\n  #singleline = false;\n  #color = \"\";\n  // Base 360 color for text.\n  #disable = \"\";\n  // What vtt properties to disable, uses |\n  #theme = \"\";\n  // blank/light or dark.  Dark shows lighter text.\n  #youtube = false;\n  // Makes vtt cue adjustments specific to YouTube.\n  // Internal\n  #captions = {};\n  // Master array of the cues.\n  #currentCue = void 0;\n  // for parser.\n  #debounceScrolling = false;\n  // for throttling scrolling.\n  #paused = false;\n  // toggle scrolling and highlighting.\n  #textTrack = {};\n  // Native textTrack from video element.\n  #spacer = 5;\n  // Time in sec between cues where the progres bar cue will be shown.\n  #nudge = 0.5;\n  // Time in sec to start the cue early. comp for css transition.\n  css = defaultStyles();\n  constructor() {\n    super();\n    if (this.isConnected) {\n      this.#init();\n    }\n  }\n  static get observedAttributes() {\n    return [\n      \"src\",\n      \"playhead\",\n      \"height\",\n      \"debounce\",\n      \"singleline\",\n      \"color\",\n      \"disable\",\n      \"spacer\"\n    ];\n  }\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"playhead\") {\n      this.#updateCaptionStatus(newValue);\n      return;\n    }\n    if (name === \"debounce\") {\n      this.#debounce = newValue;\n      return;\n    }\n    this.#create({ changes: { name, oldValue, newValue } });\n  }\n  set src(item) {\n    this.setAttribute(\"src\", item);\n  }\n  set playhead(item) {\n    this.setAttribute(\"playhead\", item);\n  }\n  set debounce(item) {\n    this.setAttribute(\"debounce\", item);\n  }\n  set singleline(item) {\n    if (typeof item !== \"boolean\") {\n      console.warn(\"singleline must be a boolean.\", item);\n      this.#event(\"error\", \"singleline must be a boolean.\");\n      return;\n    }\n    this.setAttribute(\"singleline\", item);\n  }\n  set disable(item) {\n    this.setAttribute(\"disable\", item);\n  }\n  set debounceScrolling(item) {\n    if (typeof item !== \"boolean\") {\n      console.warn(\"debounceScrolling must be a boolean.\", item);\n      this.#event(\"error\", \"debounceScrolling must be a boolean.\");\n      return;\n    }\n    this.#debounceScrolling = item;\n  }\n  set textTrack(item) {\n    this.#textTrack = item;\n    this.#create();\n  }\n  set spacer(item) {\n    this.#spacer = item;\n  }\n  set youtube(item) {\n    if (typeof item !== \"boolean\") {\n      console.warn(\"youtube must be a boolean.\", item);\n      this.#event(\"error\", \"youtube must be a boolean.\");\n      return;\n    }\n    this.#youtube = item;\n  }\n  get src() {\n    return this.#src;\n  }\n  get playhead() {\n    return this.#playhead;\n  }\n  get captions() {\n    return this.#captions;\n  }\n  get debounce() {\n    return this.#debounce;\n  }\n  get singleline() {\n    return this.#singleline;\n  }\n  get height() {\n    return this.#height;\n  }\n  get paused() {\n    return this.#paused;\n  }\n  get disable() {\n    return this.#disable;\n  }\n  get theme() {\n    return this.#theme;\n  }\n  get spacer() {\n    return this.#spacer;\n  }\n  get textTrack() {\n    return this.#textTrack;\n  }\n  get youtube() {\n    return this.#youtube;\n  }\n  connectedCallback() {\n    this.#init();\n  }\n  #init() {\n    if (this.#isInit) {\n      this.#create();\n      return;\n    }\n    this.#isInit = true;\n    const template = document.createElement(\"template\");\n    template.innerHTML = `\n      ${this.css}\n      <captionselement id=\"root\" data-theme=\"\"></captionselement>\n    `;\n    const html = template.content.cloneNode(true);\n    this.appendChild(html);\n    this.#divs = {\n      root: this.querySelector(\"#root\")\n    };\n    this.#divs.root.addEventListener(\"click\", (e) => {\n      const div = e.composedPath()[0].closest(\"button\");\n      if (div && \"localName\" in div && div.localName === \"button\") {\n        const { index } = div.dataset;\n        const seconds = this.#captions.cues[index].seconds.start;\n        this.#event(\"seek\", seconds);\n        this.#updateCaptionStatus(seconds + 0.2);\n      }\n    });\n    this.#divs.root.addEventListener(\"scroll\", () => {\n      this.#debounceScrolling = true;\n      console.log(\"[scroll] touch move...\");\n      this.#divs.root.addEventListener(\"mouseup\", () => {\n        setTimeout(() => {\n          this.#debounceScrolling = false;\n        }, this.#debounce);\n      });\n      setTimeout(() => {\n        this.#debounceScrolling = false;\n      }, this.#debounce * 3);\n    }, false);\n    this.#create();\n  }\n  async #create(params) {\n    this.#src = this.getAttribute(\"src\") || \"\";\n    this.#playhead = parseInt(this.getAttribute(\"playhead\"), 10) || 0;\n    this.#height = this.getAttribute(\"height\") || \"400px\";\n    this.#debounce = parseInt(this.getAttribute(\"debounce\"), 10) || 5e3;\n    this.#singleline = this.getAttribute(\"singleline\") === \"true\" || this.getAttribute(\"singleline\") === true || false;\n    this.#color = this.getAttribute(\"color\") || \"\";\n    this.#disable = this.getAttribute(\"disable\") || \"\";\n    this.#theme = this.getAttribute(\"theme\") || \"\";\n    this.#youtube = this.getAttribute(\"youtube\") === \"true\" || this.getAttribute(\"youtube\") === true || false;\n    if (!this.#src && !(this.#textTrack && \"id\" in this.#textTrack)) {\n      console.debug(\"No text track\");\n      return;\n    }\n    this.setTheme();\n    const customStyles = [];\n    if (this.#height !== \"400px\") {\n      customStyles.push(`height: ${this.#height}`);\n    }\n    if (this.#color) {\n      customStyles.push(`--base: ${this.#color}`);\n    }\n    this.#divs.root?.setAttribute(\"style\", customStyles.join(\"; \"));\n    if (params?.changes.name === \"src\") {\n      this.#captions = await this.#parse();\n    }\n    this.#showCaptions();\n  }\n  async #parse() {\n    let captions;\n    if (this.#src && Utilities.getFileType(this.#src) === \"vtt\") {\n      this.#textTrack = await this.#renderCaptionSrc(this.#src);\n    }\n    if (this.#textTrack && \"cues\" in this.#textTrack) {\n      console.log(\"Trying foo parser.\");\n      captions = parseTextTrack(this.#textTrack, this.#nudge);\n    }\n    if (this.#src && (!captions || !captions.cues)) {\n      console.log(\"Trying backup parser.\");\n      const srcContents = await fetch(this.#src).then((res) => res.text());\n      const type = Utilities.getFileType(this.#src);\n      if (srcContents)\n        captions = parseVTT(srcContents, type);\n    }\n    if (!captions || !captions.cues) {\n      console.error(\"Not able to find and render captions.\", captions);\n      this.#divs.root.innerHTML = '<p class=\"empty\">No captions.</p>';\n      return void 0;\n    }\n    captions.cues = parseSubTextCues(captions.cues);\n    if (this.#youtube)\n      captions.cues = this.#youtubeAdjustments(captions.cues);\n    captions.cues = addCueSpaces(captions.cues, this.#spacer);\n    this.#setCuesStatus();\n    console.log(\"Final Captions.\", captions);\n    return captions;\n  }\n  #updateCaptionStatus(playhead) {\n    if (this.#paused)\n      return;\n    this.#playhead = playhead;\n    this.#setCuesStatus();\n    const activeIndex = this.#captions.cues?.findIndex((cue) => cue.status === \"active\");\n    this.#captions.cues?.forEach((cue, index) => {\n      if (cue.type === \"spacer\" && cue.status === \"active\") {\n        const progValue = Math.round(this.#playhead - cue.seconds.start);\n        const progress = this.#divs.root.querySelector(`[data-progress=\"${index}\"]`);\n        if (progress)\n          progress.value = progValue;\n      }\n    });\n    this.#divs.root.querySelectorAll(\".active\")?.forEach((item) => {\n      const { index } = item.dataset;\n      const cue = this.#captions.cues[index];\n      if (cue.subCues) {\n        const textDiv = item.querySelector(\".text\");\n        textDiv.innerHTML = cue.subCues.map((sub) => `<span class=\"${sub.status}\">${sub.text}</span>`).join(\"\");\n      }\n    });\n    if (activeIndex === this.#currentCue) {\n      return;\n    }\n    this.#currentCue = activeIndex;\n    const progressbars = this.#divs.root.querySelectorAll(\"[data-progress]\");\n    if (progressbars) {\n      [...progressbars].forEach((bar) => {\n        const newBar = bar;\n        newBar.value = 0;\n      });\n    }\n    if (this.#debounceScrolling) {\n      const elms = this.#divs.root.querySelectorAll(\"[data-index]\");\n      const elm = elms[this.#currentCue];\n      if (elm) {\n        if (!CaptionsViewer.isElementInViewport(elm, \"captionselement\"))\n          this.#debounceScrolling = false;\n      }\n    }\n    this.#updateCaption();\n    this.#scrollToCue();\n  }\n  static isElementInViewport(el, container) {\n    const rect = el.getBoundingClientRect();\n    const parent = el.closest(container);\n    const parentRect = parent.getBoundingClientRect();\n    return rect.bottom <= parentRect.bottom;\n  }\n  #showCaptions() {\n    if (!this.#captions)\n      return;\n    const disabled = this.#disable ? this.#disable.split(\"|\") : [];\n    this.#divs.root.innerHTML = \"\";\n    let html = \"<ol>\";\n    this.#captions.cues?.forEach((cue, index) => {\n      if (cue.timecode) {\n        const styleName = cue.status;\n        const timecode = `<span class=\"timecode\">${Utilities.prettyTimecode(cue.timecode.start)}</span>`;\n        const chapter = cue.chapter ? `<span class=\"chapter\">${cue.chapter}</span>` : \"\";\n        const textJoiner = this.#singleline ? \" \" : \"<br />\";\n        let spacerProgress = \"\";\n        if (cue.type === \"spacer\") {\n          const progMax = Math.round(cue.seconds.end - cue.seconds.start);\n          spacerProgress = `<progress max=\"${progMax}\" value=\"0\" data-progress=\"${index}\"></progress>`;\n        }\n        let text = `<span class=\"text\">${cue.text.join(textJoiner)}</span>`;\n        if (cue.subCues) {\n          text = '<span class=\"text\">';\n          text += cue.subCues.map((sub) => `<span class=\"${sub.status}\">${sub.text}</span>`).join(\"\");\n          text += \"</span>\";\n        }\n        html += `<li tabindex=\"0\">\n          <button\n            type=\"button\"\n            tabindex=\"${index + 1}\"\n            class=\"cue ${styleName} ${cue.type || \"\"}\"\n            data-index=\"${index}\"\n          >${!disabled.includes(\"timecode\") && cue.type !== \"spacer\" ? timecode : \"\"} ${!disabled.includes(\"chapters\") ? chapter : \"\"} ${!disabled.includes(\"text\") ? text : \"\"} ${spacerProgress}\n          </button></li>`;\n      }\n    });\n    html += \"</ol>\";\n    this.#divs.root.innerHTML = html;\n  }\n  #updateCaption() {\n    const divs = this.#divs.root.querySelectorAll(\"[data-index]\");\n    divs.forEach((item) => {\n      const { index } = item.dataset;\n      const cue = this.#captions.cues[index];\n      item.classList.remove(\"upcoming\", \"next\", \"active\", \"previous\", \"passed\");\n      item.classList.add(cue.status);\n    });\n  }\n  #setCuesStatus() {\n    if (!(\"cues\" in this.#captions))\n      return;\n    this.#captions.cues = this.#captions.cues.map((cue) => {\n      if (cue.seconds.end < this.#playhead) {\n        cue.active = false;\n        cue.status = \"passed\";\n      }\n      if (cue.seconds.start > this.#playhead) {\n        cue.active = false;\n        cue.status = \"upcoming\";\n      }\n      if (cue.seconds.start < this.#playhead && cue.seconds.end > this.#playhead) {\n        cue.active = true;\n        cue.status = \"active\";\n      }\n      return cue;\n    });\n    const passed = this.#captions.cues.filter((cue) => cue.status === \"passed\");\n    const upcomingIndex = this.#captions.cues.findIndex((cue) => cue.status === \"upcoming\");\n    if (upcomingIndex > 0) {\n      this.#captions.cues[upcomingIndex].status = \"next\";\n    }\n    if (passed && passed.length > 0) {\n      this.#captions.cues[passed.length - 1].status = \"previous\";\n    }\n    this.#captions.cues = this.#captions.cues.map((cue) => {\n      if (cue.subCues) {\n        cue.subCues.map((sub) => {\n          sub.status = sub.seconds < this.#playhead ? \"sub_active\" : \"sub_upcoming\";\n          return sub;\n        });\n      }\n      return cue;\n    });\n  }\n  #scrollToCue() {\n    if (!this.#currentCue || this.#currentCue < 0)\n      return;\n    if (this.#debounceScrolling)\n      return;\n    const elms = this.#divs.root.querySelectorAll(\"li\");\n    const elm = elms[this.#currentCue];\n    const elmHeight = elm.offsetHeight;\n    const elmOffset = elm.offsetTop;\n    this.#divs.root.scrollTop = elmOffset - elmHeight;\n  }\n  pause() {\n    this.#paused = !this.#paused;\n  }\n  setTheme(userPreference = void 0) {\n    const theme = Utilities.getTheme(userPreference || this.#theme || \"\");\n    this.#theme = theme;\n    this.#divs.root.dataset.theme = theme;\n  }\n  #event(name, value, object) {\n    this.dispatchEvent(new CustomEvent(\"all\", { detail: { name, value, full: object } }));\n    this.dispatchEvent(new CustomEvent(name, { detail: { value, full: object } }));\n  }\n  async #renderCaptionSrc(src) {\n    if (!this.#divs.root.querySelector(\"#tempVid\")) {\n      const track = document.createElement(\"track\");\n      track.mode = \"active\";\n      track.default = true;\n      track.src = src;\n      const video = document.createElement(\"video\");\n      video.preload = \"auto\";\n      video.setAttribute(\"id\", \"tempVid\");\n      video.appendChild(track);\n      this.#divs.root.appendChild(video);\n    }\n    const videodiv = this.#divs.root.querySelector(\"#tempVid\");\n    await CaptionsViewer.trackReady(videodiv);\n    return videodiv.textTracks[0];\n  }\n  static trackReady(video) {\n    let count = 0;\n    return new Promise((resolve) => {\n      const interval = setInterval(() => {\n        count += 1;\n        if (count > 1e3) {\n          clearInterval(interval);\n          resolve();\n        }\n        if (Array.from(video.textTracks[0].cues).length) {\n          clearInterval(interval);\n          resolve();\n        }\n      }, 2);\n    });\n  }\n  #youtubeAdjustments(cues) {\n    this.#captions.cues.splice(1, 1);\n    let newCues;\n    newCues = cues.map((cue, index) => {\n      if (cue.text.length > 0 && index !== 1) {\n        cue.text.shift();\n      }\n      return cue;\n    });\n    newCues = cues.filter((cue) => cue.text.length !== 0);\n    newCues = cues.filter((cue) => cue.text[0] && cue.text[0].length !== 0);\n    return newCues;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "dist/captions-viewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/captions-viewer.min.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "p",
          "default": "class extends HTMLElement{#y=!1;#t;#s=\"\";#i=0;#c=\"400px\";#o=0;#f=!1;#m=\"\";#l=\"\";#h=\"\";#d=!1;#e={};#n=void 0;#a=!1;#u=!1;#r={};#b=5;#k=.5;css=x();constructor(){super(),this.isConnected&&this.#v()}static get observedAttributes(){return[\"src\",\"playhead\",\"height\",\"debounce\",\"singleline\",\"color\",\"disable\",\"spacer\"]}attributeChangedCallback(t,s,e){if(t===\"playhead\"){this.#x(e);return}if(t===\"debounce\"){this.#o=e;return}this.#p({changes:{name:t,oldValue:s,newValue:e}})}set src(t){this.setAttribute(\"src\",t)}set playhead(t){this.setAttribute(\"playhead\",t)}set debounce(t){this.setAttribute(\"debounce\",t)}set singleline(t){if(typeof t!=\"boolean\"){console.warn(\"singleline must be a boolean.\",t),this.#g(\"error\",\"singleline must be a boolean.\");return}this.setAttribute(\"singleline\",t)}set disable(t){this.setAttribute(\"disable\",t)}set debounceScrolling(t){if(typeof t!=\"boolean\"){console.warn(\"debounceScrolling must be a boolean.\",t),this.#g(\"error\",\"debounceScrolling must be a boolean.\");return}this.#a=t}set textTrack(t){this.#r=t,this.#p()}set spacer(t){this.#b=t}set youtube(t){if(typeof t!=\"boolean\"){console.warn(\"youtube must be a boolean.\",t),this.#g(\"error\",\"youtube must be a boolean.\");return}this.#d=t}get src(){return this.#s}get playhead(){return this.#i}get captions(){return this.#e}get debounce(){return this.#o}get singleline(){return this.#f}get height(){return this.#c}get paused(){return this.#u}get disable(){return this.#l}get theme(){return this.#h}get spacer(){return this.#b}get textTrack(){return this.#r}get youtube(){return this.#d}connectedCallback(){this.#v()}#v(){if(this.#y){this.#p();return}this.#y=!0;let t=document.createElement(\"template\");t.innerHTML=`\n      ${this.css}\n      <captionselement id=\"root\" data-theme=\"\"></captionselement>\n    `;let s=t.content.cloneNode(!0);this.appendChild(s),this.#t={root:this.querySelector(\"#root\")},this.#t.root.addEventListener(\"click\",e=>{let i=e.composedPath()[0].closest(\"button\");if(i&&\"localName\"in i&&i.localName===\"button\"){let{index:r}=i.dataset,n=this.#e.cues[r].seconds.start;this.#g(\"seek\",n),this.#x(n+.2)}}),this.#t.root.addEventListener(\"scroll\",()=>{this.#a=!0,console.log(\"[scroll] touch move...\"),this.#t.root.addEventListener(\"mouseup\",()=>{setTimeout(()=>{this.#a=!1},this.#o)}),setTimeout(()=>{this.#a=!1},this.#o*3)},!1),this.#p()}async#p(t){if(this.#s=this.getAttribute(\"src\")||\"\",this.#i=parseInt(this.getAttribute(\"playhead\"),10)||0,this.#c=this.getAttribute(\"height\")||\"400px\",this.#o=parseInt(this.getAttribute(\"debounce\"),10)||5e3,this.#f=this.getAttribute(\"singleline\")===\"true\"||this.getAttribute(\"singleline\")===!0||!1,this.#m=this.getAttribute(\"color\")||\"\",this.#l=this.getAttribute(\"disable\")||\"\",this.#h=this.getAttribute(\"theme\")||\"\",this.#d=this.getAttribute(\"youtube\")===\"true\"||this.getAttribute(\"youtube\")===!0||!1,!this.#s&&!(this.#r&&\"id\"in this.#r)){console.debug(\"No text track\");return}this.setTheme();let s=[];this.#c!==\"400px\"&&s.push(`height: ${this.#c}`),this.#m&&s.push(`--base: ${this.#m}`),this.#t.root?.setAttribute(\"style\",s.join(\"; \")),t?.changes.name===\"src\"&&(this.#e=await this.#C()),this.#S()}async#C(){let t;if(this.#s&&c.getFileType(this.#s)===\"vtt\"&&(this.#r=await this.#E(this.#s)),this.#r&&\"cues\"in this.#r&&(console.log(\"Trying foo parser.\"),t=m(this.#r,this.#k)),this.#s&&(!t||!t.cues)){console.log(\"Trying backup parser.\");let s=await fetch(this.#s).then(i=>i.text()),e=c.getFileType(this.#s);s&&(t=v(s,e))}if(!t||!t.cues){console.error(\"Not able to find and render captions.\",t),this.#t.root.innerHTML='<p class=\"empty\">No captions.</p>';return}return t.cues=b(t.cues),this.#d&&(t.cues=this.#$(t.cues)),t.cues=y(t.cues,this.#b),this.#T(),console.log(\"Final Captions.\",t),t}#x(t){if(this.#u)return;this.#i=t,this.#T();let s=this.#e.cues?.findIndex(i=>i.status===\"active\");if(this.#e.cues?.forEach((i,r)=>{if(i.type===\"spacer\"&&i.status===\"active\"){let n=Math.round(this.#i-i.seconds.start),h=this.#t.root.querySelector(`[data-progress=\"${r}\"]`);h&&(h.value=n)}}),this.#t.root.querySelectorAll(\".active\")?.forEach(i=>{let{index:r}=i.dataset,n=this.#e.cues[r];if(n.subCues){let h=i.querySelector(\".text\");h.innerHTML=n.subCues.map(d=>`<span class=\"${d.status}\">${d.text}</span>`).join(\"\")}}),s===this.#n)return;this.#n=s;let e=this.#t.root.querySelectorAll(\"[data-progress]\");if(e&&[...e].forEach(i=>{let r=i;r.value=0}),this.#a){let r=this.#t.root.querySelectorAll(\"[data-index]\")[this.#n];r&&(p.isElementInViewport(r,\"captionselement\")||(this.#a=!1))}this.#w(),this.#A()}static isElementInViewport(t,s){let e=t.getBoundingClientRect(),r=t.closest(s).getBoundingClientRect();return e.bottom<=r.bottom}#S(){if(!this.#e)return;let t=this.#l?this.#l.split(\"|\"):[];this.#t.root.innerHTML=\"\";let s=\"<ol>\";this.#e.cues?.forEach((e,i)=>{if(e.timecode){let r=e.status,n=`<span class=\"timecode\">${c.prettyTimecode(e.timecode.start)}</span>`,h=e.chapter?`<span class=\"chapter\">${e.chapter}</span>`:\"\",d=this.#f?\" \":\"<br />\",a=\"\";e.type===\"spacer\"&&(a=`<progress max=\"${Math.round(e.seconds.end-e.seconds.start)}\" value=\"0\" data-progress=\"${i}\"></progress>`);let l=`<span class=\"text\">${e.text.join(d)}</span>`;e.subCues&&(l='<span class=\"text\">',l+=e.subCues.map(u=>`<span class=\"${u.status}\">${u.text}</span>`).join(\"\"),l+=\"</span>\"),s+=`<li tabindex=\"0\">\n          <button\n            type=\"button\"\n            tabindex=\"${i+1}\"\n            class=\"cue ${r} ${e.type||\"\"}\"\n            data-index=\"${i}\"\n          >${!t.includes(\"timecode\")&&e.type!==\"spacer\"?n:\"\"} ${t.includes(\"chapters\")?\"\":h} ${t.includes(\"text\")?\"\":l} ${a}\n          </button></li>`}}),s+=\"</ol>\",this.#t.root.innerHTML=s}#w(){this.#t.root.querySelectorAll(\"[data-index]\").forEach(s=>{let{index:e}=s.dataset,i=this.#e.cues[e];s.classList.remove(\"upcoming\",\"next\",\"active\",\"previous\",\"passed\"),s.classList.add(i.status)})}#T(){if(!(\"cues\"in this.#e))return;this.#e.cues=this.#e.cues.map(e=>(e.seconds.end<this.#i&&(e.active=!1,e.status=\"passed\"),e.seconds.start>this.#i&&(e.active=!1,e.status=\"upcoming\"),e.seconds.start<this.#i&&e.seconds.end>this.#i&&(e.active=!0,e.status=\"active\"),e));let t=this.#e.cues.filter(e=>e.status===\"passed\"),s=this.#e.cues.findIndex(e=>e.status===\"upcoming\");s>0&&(this.#e.cues[s].status=\"next\"),t&&t.length>0&&(this.#e.cues[t.length-1].status=\"previous\"),this.#e.cues=this.#e.cues.map(e=>(e.subCues&&e.subCues.map(i=>(i.status=i.seconds<this.#i?\"sub_active\":\"sub_upcoming\",i)),e))}#A(){if(!this.#n||this.#n<0||this.#a)return;let s=this.#t.root.querySelectorAll(\"li\")[this.#n],e=s.offsetHeight,i=s.offsetTop;this.#t.root.scrollTop=i-e}pause(){this.#u=!this.#u}setTheme(t=void 0){let s=c.getTheme(t||this.#h||\"\");this.#h=s,this.#t.root.dataset.theme=s}#g(t,s,e){this.dispatchEvent(new CustomEvent(\"all\",{detail:{name:t,value:s,full:e}})),this.dispatchEvent(new CustomEvent(t,{detail:{value:s,full:e}}))}async#E(t){if(!this.#t.root.querySelector(\"#tempVid\")){let e=document.createElement(\"track\");e.mode=\"active\",e.default=!0,e.src=t;let i=document.createElement(\"video\");i.preload=\"auto\",i.setAttribute(\"id\",\"tempVid\"),i.appendChild(e),this.#t.root.appendChild(i)}let s=this.#t.root.querySelector(\"#tempVid\");return await p.trackReady(s),s.textTracks[0]}static trackReady(t){let s=0;return new Promise(e=>{let i=setInterval(()=>{s+=1,s>1e3&&(clearInterval(i),e()),Array.from(t.textTracks[0].cues).length&&(clearInterval(i),e())},2)})}#$(t){this.#e.cues.splice(1,1);let s;return s=t.map((e,i)=>(e.text.length>0&&i!==1&&e.text.shift(),e)),s=t.filter(e=>e.text.length!==0),s=t.filter(e=>e.text[0]&&e.text[0].length!==0),s}}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "p",
            "module": "dist/captions-viewer.min.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/CaptionsViewer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CaptionsViewer",
          "members": [
            {
              "kind": "field",
              "name": "#isInit",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#divs",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#src",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#playhead",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "'400px'"
            },
            {
              "kind": "field",
              "name": "#debounce",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#singleline",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#color",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#disable",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#theme",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#youtube",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#captions",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#currentCue",
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "#debounceScrolling",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#paused",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#textTrack",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#spacer",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "5"
            },
            {
              "kind": "field",
              "name": "#nudge",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5"
            },
            {
              "kind": "field",
              "name": "css"
            },
            {
              "kind": "field",
              "name": "src"
            },
            {
              "kind": "field",
              "name": "playhead"
            },
            {
              "kind": "field",
              "name": "debounce"
            },
            {
              "kind": "field",
              "name": "singleline"
            },
            {
              "kind": "field",
              "name": "disable"
            },
            {
              "kind": "field",
              "name": "debounceScrolling"
            },
            {
              "kind": "field",
              "name": "textTrack"
            },
            {
              "kind": "field",
              "name": "spacer"
            },
            {
              "kind": "field",
              "name": "youtube"
            },
            {
              "kind": "field",
              "name": "captions"
            },
            {
              "kind": "field",
              "name": "height"
            },
            {
              "kind": "field",
              "name": "paused"
            },
            {
              "kind": "field",
              "name": "theme"
            },
            {
              "kind": "method",
              "name": "#init"
            },
            {
              "kind": "method",
              "name": "#create",
              "parameters": [
                {
                  "name": "params"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#parse"
            },
            {
              "kind": "method",
              "name": "#updateCaptionStatus",
              "parameters": [
                {
                  "name": "playhead"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isElementInViewport",
              "static": true,
              "parameters": [
                {
                  "name": "el"
                },
                {
                  "name": "container"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#showCaptions"
            },
            {
              "kind": "method",
              "name": "#updateCaption"
            },
            {
              "kind": "method",
              "name": "#setCuesStatus"
            },
            {
              "kind": "method",
              "name": "#scrollToCue"
            },
            {
              "kind": "method",
              "name": "pause"
            },
            {
              "kind": "method",
              "name": "setTheme",
              "parameters": [
                {
                  "name": "userPreference",
                  "default": "undefined"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#event",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "object"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderCaptionSrc",
              "parameters": [
                {
                  "name": "src"
                }
              ]
            },
            {
              "kind": "method",
              "name": "trackReady",
              "static": true,
              "parameters": [
                {
                  "name": "video"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#youtubeAdjustments",
              "parameters": [
                {
                  "name": "cues"
                }
              ]
            }
          ],
          "events": [
            {
              "name": "all",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "src"
            },
            {
              "name": "playhead"
            },
            {
              "name": "height"
            },
            {
              "name": "debounce"
            },
            {
              "name": "singleline"
            },
            {
              "name": "color"
            },
            {
              "name": "disable"
            },
            {
              "name": "spacer"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "captions-viewer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CaptionsViewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/defautStylesheet.js",
      "declarations": [
        {
          "kind": "function",
          "name": "defaultStyles"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultStyles",
          "declaration": {
            "name": "defaultStyles",
            "module": "src/defautStylesheet.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/defautStylesheet_theme_1.js",
      "declarations": [
        {
          "kind": "function",
          "name": "defaultStyles"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultStyles",
          "declaration": {
            "name": "defaultStyles",
            "module": "src/defautStylesheet_theme_1.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/defautStylesheet_theme_2 copy.js",
      "declarations": [
        {
          "kind": "function",
          "name": "defaultStyles"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultStyles",
          "declaration": {
            "name": "defaultStyles",
            "module": "src/defautStylesheet_theme_2 copy.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/parsers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parseTextTrack",
          "parameters": [
            {
              "name": "textTrack"
            },
            {
              "name": "nudge",
              "default": "0"
            }
          ]
        },
        {
          "kind": "function",
          "name": "parseSubTextCues",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        },
        {
          "kind": "function",
          "name": "addCueSpaces",
          "parameters": [
            {
              "name": "cues"
            },
            {
              "name": "distance"
            }
          ]
        },
        {
          "kind": "function",
          "name": "parseVTT",
          "parameters": [
            {
              "name": "contents"
            },
            {
              "name": "type"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseTextTrack",
          "declaration": {
            "name": "parseTextTrack",
            "module": "src/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "parseSubTextCues",
          "declaration": {
            "name": "parseSubTextCues",
            "module": "src/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "addCueSpaces",
          "declaration": {
            "name": "addCueSpaces",
            "module": "src/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "parseVTT",
          "declaration": {
            "name": "parseVTT",
            "module": "src/parsers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Utilities",
          "members": [
            {
              "kind": "method",
              "name": "timecodeToSeconds",
              "static": true,
              "parameters": [
                {
                  "name": "timecode"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isValidJSON",
              "static": true,
              "parameters": [
                {
                  "name": "input"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isTimecode",
              "static": true,
              "parameters": [
                {
                  "name": "input"
                }
              ]
            },
            {
              "kind": "method",
              "name": "prettyTimecode",
              "static": true,
              "parameters": [
                {
                  "name": "timecode"
                }
              ]
            },
            {
              "kind": "method",
              "name": "secondsToTimecode",
              "static": true,
              "parameters": [
                {
                  "name": "seconds"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTheme",
              "static": true,
              "parameters": [
                {
                  "name": "userPreference"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getFileType",
              "static": true,
              "parameters": [
                {
                  "name": "file"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Utilities",
            "module": "src/utilities.js"
          }
        }
      ]
    }
  ]
}
