{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "captions-viewer.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "/src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CaptionsViewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "./src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/captions-viewer.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "CaptionsViewer",
          "default": "class extends HTMLElement {\n  #isInit = false;\n  #divs;\n  // Params\n  #src = \"\";\n  // location of a vtt src.\n  #playhead = 0;\n  // current seconds from start.\n  #height = \"400px\";\n  // Hight of container, applied as inline style.\n  #debounce = 4e3;\n  // In seconds how long to\n  #singleline = false;\n  #color = \"\";\n  // Base 360 color for text.\n  #disable = \"\";\n  // What vtt properties to disable, uses |\n  #theme = \"\";\n  // blank/light or dark.  Dark shows lighter text.\n  #youtube = false;\n  // Makes vtt cue adjustments specific to YouTube.\n  #enableCSS = true;\n  // Removal of default styles.\n  // Internal\n  #captions = {};\n  // Master array of the cues.\n  #currentCue = void 0;\n  // for parser.\n  #debounceScrolling = false;\n  // for throttling scrolling.\n  #paused = false;\n  // toggle scrolling and highlighting.\n  #textTrack = {};\n  // Native textTrack from video element.\n  #spacer = 5;\n  // Time in sec between cues where the progres bar cue will be shown.\n  #nudge = 0.5;\n  // Time in sec to start the cue early. comp for css transition.\n  #isAutoScroll = false;\n  css = defaultStyles();\n  constructor() {\n    super();\n    if (this.isConnected) {\n      this.#init();\n    }\n  }\n  static get observedAttributes() {\n    return [\n      \"src\",\n      \"playhead\",\n      \"height\",\n      \"debounce\",\n      \"singleline\",\n      \"color\",\n      \"disable\",\n      \"spacer\",\n      \"enableCSS\"\n    ];\n  }\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"playhead\") {\n      this.#update(newValue);\n      return;\n    }\n    if (name === \"debounce\") {\n      this.#debounce = newValue;\n      return;\n    }\n    this.#create({ changes: { name, oldValue, newValue } });\n  }\n  get captions() {\n    return this.#captions;\n  }\n  get debounce() {\n    return this.#debounce;\n  }\n  set debounce(item) {\n    if (typeof item !== \"number\") {\n      this.#event(\"error\", \"debounce must be a number.\");\n      return;\n    }\n    if (item) {\n      this.setAttribute(\"debounce\", item);\n    } else {\n      this.removeAttribute(\"debounce\");\n    }\n  }\n  get debounceScrolling() {\n    return this.#debounceScrolling;\n  }\n  set debounceScrolling(item) {\n    if (typeof item !== \"boolean\") {\n      this.#event(\"error\", \"debounceScrolling must be a boolean.\");\n      return;\n    }\n    this.#debounceScrolling = item;\n  }\n  get disable() {\n    return this.#disable;\n  }\n  set disable(item) {\n    if (typeof item !== \"string\") {\n      this.#event(\"error\", \"Disable must be a string.\");\n      return;\n    }\n    this.setAttribute(\"disable\", item);\n    if (item) {\n      this.setAttribute(\"disable\", item);\n    } else {\n      this.removeAttribute(\"disabled\");\n    }\n  }\n  get enableCSS() {\n    return this.#enableCSS;\n  }\n  set enableCSS(item) {\n    if (typeof item !== \"boolean\") {\n      this.#event(\"error\", \"enableCSS must be a boolean.\");\n      return;\n    }\n    this.#enableCSS = item;\n  }\n  get height() {\n    return this.#height;\n  }\n  set height(item) {\n    if (typeof item !== \"string\") {\n      this.#event(\"error\", \"height must be a string with a unit value.\");\n      return;\n    }\n    this.setAttribute(\"height\", item);\n  }\n  get nudge() {\n    return this.#nudge;\n  }\n  set nudge(item) {\n    if (typeof item !== \"number\") {\n      this.#event(\"error\", \"nudge must be a number\");\n      return;\n    }\n    this.#nudge = item;\n  }\n  get paused() {\n    return this.#paused;\n  }\n  set paused(item) {\n    this.passed(item);\n  }\n  get singleline() {\n    return this.#singleline;\n  }\n  set singleline(item) {\n    if (typeof item !== \"boolean\") {\n      this.#event(\"error\", \"singleline must be a boolean.\");\n      return;\n    }\n    this.setAttribute(\"singleline\", item);\n  }\n  get playhead() {\n    return this.#playhead;\n  }\n  set playhead(item) {\n    if (typeof item !== \"number\") {\n      this.#event(\"error\", \"playhead must be a number.\");\n      return;\n    }\n    this.setAttribute(\"playhead\", item);\n  }\n  get spacer() {\n    return this.#spacer;\n  }\n  set spacer(item) {\n    if (typeof item !== \"number\") {\n      this.#event(\"error\", \"spacer must be a number.\");\n      return;\n    }\n    this.#spacer = item;\n  }\n  get src() {\n    return this.#src;\n  }\n  set src(item) {\n    if (typeof item !== \"string\") {\n      this.#event(\"error\", \"src must be a string.\");\n      return;\n    }\n    if (item) {\n      this.setAttribute(\"src\", item);\n    } else {\n      this.removeAttribute(\"src\");\n    }\n  }\n  get textTrack() {\n    return this.#textTrack;\n  }\n  set textTrack(item) {\n    this.#textTrack = item;\n    this.#create({ changes: { name: \"textTrack\" } });\n  }\n  get theme() {\n    return this.#theme;\n  }\n  set theme(item) {\n    this.setTheme(item);\n  }\n  get youtube() {\n    return this.#youtube;\n  }\n  set youtube(item) {\n    if (typeof item !== \"boolean\") {\n      this.#event(\"error\", \"youtube must be a boolean.\");\n      return;\n    }\n    this.#youtube = item;\n  }\n  connectedCallback() {\n    this.#init();\n  }\n  #init() {\n    if (this.#isInit) {\n      this.#create();\n      return;\n    }\n    this.#isInit = true;\n    const template = document.createElement(\"template\");\n    template.innerHTML = `\n      ${this.css}\n      <captionselement id=\"root\" data-theme=\"\"></captionselement>\n    `;\n    const html = template.content.cloneNode(true);\n    this.appendChild(html);\n    this.#divs = {\n      root: this.querySelector(\"#root\"),\n      empty: this.querySelector(\"captions-viewer-empty\")\n    };\n    this.#divs.root.addEventListener(\"click\", (e) => {\n      const div = e.composedPath()[0].closest(\"button\");\n      if (div && \"localName\" in div && div.localName === \"button\") {\n        const seconds = div.dataset.start;\n        this.#event(\"seek\", seconds);\n        this.#update(seconds + 0.2);\n      }\n    });\n    this.#setScrollingEvents();\n    this.#create();\n  }\n  async #create(params) {\n    this.#src = this.getAttribute(\"src\") || this.#src;\n    this.#playhead = parseInt(this.getAttribute(\"playhead\"), 10) || this.#playhead;\n    this.#height = this.getAttribute(\"height\") || this.#height;\n    this.#debounce = parseInt(this.getAttribute(\"debounce\"), 10) || this.#debounce;\n    this.#singleline = this.getAttribute(\"singleline\") === \"true\" || this.getAttribute(\"singleline\") === true || false;\n    this.#color = this.getAttribute(\"color\") || this.#color;\n    this.#disable = this.getAttribute(\"disable\") || \"\";\n    this.#theme = this.getAttribute(\"theme\") || this.#theme;\n    this.#youtube = this.getAttribute(\"youtube\") === \"true\" || this.getAttribute(\"youtube\") === true || this.#youtube;\n    this.#enableCSS = this.getAttribute(\"stylesheet\") || this.#enableCSS;\n    if (!this.#src && !(this.#textTrack && \"id\" in this.#textTrack)) {\n      this.#displayNoCaptions();\n      return;\n    }\n    if (this.#enableCSS === \"false\" || this.#enableCSS === false) {\n      const stylesheet = this.querySelector(\"#theme_a\");\n      stylesheet.innerHTML = \"\";\n    }\n    this.setTheme();\n    const customStyles = [];\n    if (this.#height !== \"400px\") {\n      customStyles.push(`height: ${this.#height}`);\n    }\n    if (this.#color) {\n      customStyles.push(`--base: ${this.#color}`);\n    }\n    this.#divs.root?.setAttribute(\"style\", customStyles.join(\"; \"));\n    if (params?.changes.name === \"src\" || params?.changes.name === \"textTrack\") {\n      this.#captions = await this.#parse(this.#textTrack, this.#src);\n      if (!this.#captions || !this.#captions.cues)\n        return;\n      this.#event(\"parsed\", \"Caption file has been parsed.\", this.#captions);\n      if (this.#youtube)\n        this.#captions.cues = this.#youtubeAdjustments(this.#captions.cues);\n      this.#setCuesStatus();\n      this.#update(this.#playhead + 0.9);\n    }\n    this.#removeNoCaptions();\n    this.#divs.root.innerHTML = this.#renderAllCaptions(this.#captions);\n  }\n  async #parse(TEXTTRACK, SRC) {\n    let captions;\n    let textTrack = TEXTTRACK;\n    if (SRC && getSupportedFileType(SRC) === \"vtt\") {\n      textTrack = await this.#renderCaptionSrc(SRC);\n    }\n    if (textTrack && \"cues\" in textTrack) {\n      captions = parseTextTrack(textTrack);\n    }\n    if (SRC && (!captions || !captions.cues)) {\n      const srcText = await fetch(SRC).then((res) => res.text());\n      const type = getSupportedFileType(SRC);\n      if (srcText)\n        captions = parseVTT(srcText, type);\n    }\n    if (!captions || !captions.cues) {\n      this.#displayNoCaptions();\n      return null;\n    }\n    captions.cues = parseSubTextCues(captions.cues);\n    captions.cues = removeDuplicateCues(captions.cues);\n    captions.cues = addCueSpaces(captions.cues, this.#spacer);\n    captions.cues = sortCues(captions.cues);\n    this.#textTrack = textTrack;\n    return captions;\n  }\n  #setScrollingEvents() {\n    let isTouch = false;\n    let timeout;\n    const addScrollStyle = () => {\n      this.#divs.root.classList.add(\"scrolling\");\n    };\n    const removeScrollStyle = () => {\n      this.#divs.root.classList.remove(\"scrolling\");\n    };\n    this.#divs.root.addEventListener(\"touchstart\", () => {\n      isTouch = true;\n      this.#debounceScrolling = true;\n      clearTimeout(timeout);\n      addScrollStyle();\n    }, { passive: true });\n    this.#divs.root.addEventListener(\"touchend\", () => {\n      isTouch = false;\n      timeout = setTimeout(() => {\n        isTouch = false;\n        this.#debounceScrolling = false;\n        removeScrollStyle();\n      }, this.#debounce);\n    });\n    setTimeout(() => {\n      this.#divs.root.addEventListener(\"scroll\", () => {\n        if (isTouch)\n          return;\n        if (this.#isAutoScroll) {\n          return;\n        }\n        if (this.#debounceScrolling === true) {\n          clearTimeout(timeout);\n        }\n        this.#debounceScrolling = true;\n        addScrollStyle();\n        timeout = setTimeout(() => {\n          this.#debounceScrolling = false;\n          removeScrollStyle();\n        }, this.#debounce);\n      }, false);\n    }, 1e3);\n  }\n  #update(playhead) {\n    if (this.#paused)\n      return;\n    this.#playhead = playhead;\n    if (!this.#captions || !this.#captions.cues)\n      return;\n    this.#setCuesStatus();\n    const activeIndex = this.#captions.cues?.findIndex((cue) => cue.status === \"active\");\n    this.#captions.cues?.forEach((cue, index) => {\n      if (cue.type === \"spacer\" && cue.status === \"active\") {\n        const progValue = Math.round(this.#playhead - cue.seconds.start);\n        const progress = this.#divs.root.querySelector(`[data-progress=\"${index}\"]`);\n        if (progress && progValue)\n          progress.value = progValue;\n      }\n    });\n    this.#divs.root.querySelectorAll(\".active\")?.forEach((item) => {\n      const { index } = item.dataset;\n      const cue = this.#captions.cues[index];\n      if (cue.subCues) {\n        const textDiv = item.querySelector(\".text\");\n        textDiv.innerHTML = cue.subCues.map((sub) => `<span class=\"${sub.status}\">${sub.text}</span>`).join(\"\");\n      }\n    });\n    if (activeIndex === this.#currentCue) {\n      return;\n    }\n    this.#currentCue = activeIndex;\n    this.#event(\"cuechange\", this.#captions.cues[this.#currentCue]);\n    const progressbars = this.#divs.root.querySelectorAll(\"[data-progress]\");\n    if (progressbars) {\n      [...progressbars].forEach((bar) => {\n        if (bar.value === 0)\n          return;\n        const newBar = bar;\n        newBar.value = 0;\n      });\n    }\n    if (this.#debounceScrolling) {\n      const elms = this.#divs.root.querySelectorAll(\"[data-index]\");\n      const elm = elms[this.#currentCue];\n      if (elm) {\n        if (!isElementInViewport(elm, \"captionselement\"))\n          this.#debounceScrolling = false;\n      }\n    }\n    this.#updateCaptionClasses();\n    this.#scrollToCue();\n  }\n  #renderAllCaptions(captions) {\n    if (!captions)\n      return \"\";\n    const disabled = this.#disable ? this.#disable.split(\"|\") : [];\n    let html = \"<ol>\";\n    captions.cues?.forEach((cue, index) => {\n      html += this.#cueToHTML(cue, index, disabled);\n    });\n    html += \"</ol>\";\n    return html;\n  }\n  #cueToHTML(cue, index, disabled) {\n    if (!cue.timecode)\n      return \"\";\n    const styleName = cue.status || \"\";\n    const timecode = `<span class=\"timecode\">${prettyTimecode(cue.timecode.start)}</span>`;\n    const chapter = cue.chapter ? `<span class=\"chapter\">${cue.chapter}</span>` : \"\";\n    const textJoiner = this.#singleline ? \" \" : \"<br />\";\n    let spacerProgress = \"\";\n    if (cue.type === \"spacer\") {\n      const progMax = Math.round(cue.seconds.end - cue.seconds.start);\n      spacerProgress = `<progress max=\"${progMax}\" value=\"0\" data-progress=\"${index}\"></progress>`;\n    }\n    let text = `<span class=\"text\">${cue.text.join(textJoiner)}</span>`;\n    if (cue.subCues) {\n      text = '<span class=\"text\">';\n      text += cue.subCues.map((sub) => `<span class=\"${sub.status}\">${sub.text}</span>`).join(\"\");\n      text += \"</span>\";\n    }\n    return `<li class=\"cueitem\">\n      <button\n        type=\"button\"\n        tabindex=\"0\"\n        data-start=\"${cue.seconds.start}\"\n        class=\"cue ${styleName} ${cue.type || \"\"}\"\n        data-index=\"${index}\"\n        style=\"animation-duration: ${Math.round(cue.seconds.end - cue.seconds.start)}s\"\n      >${!disabled.includes(\"timecode\") && cue.type !== \"spacer\" ? timecode : \"\"} ${!disabled.includes(\"chapters\") ? chapter : \"\"} ${!disabled.includes(\"text\") ? text : \"\"} ${spacerProgress}\n      </button></li>`;\n  }\n  #updateCaptionClasses() {\n    const divs = this.#divs.root.querySelectorAll(\".cueitem\");\n    divs.forEach((item, index) => {\n      const cue = this.#captions.cues[index];\n      item.firstElementChild.classList.remove(\"upcoming\", \"next\", \"active\", \"previous\", \"passed\");\n      item.firstElementChild.classList.add(cue?.status);\n    });\n  }\n  #setCuesStatus() {\n    if (!this.#captions || !(\"cues\" in this.#captions))\n      return;\n    this.#captions.cues = this.#captions.cues.map((cue) => {\n      if (cue.seconds.end - this.#nudge < this.#playhead) {\n        cue.active = false;\n        cue.status = \"passed\";\n      }\n      if (cue.seconds.start - this.#nudge > this.#playhead) {\n        cue.active = false;\n        cue.status = \"upcoming\";\n      }\n      if (cue.seconds.start - this.#nudge < this.#playhead && cue.seconds.end - this.#nudge > this.#playhead) {\n        cue.active = true;\n        cue.status = \"active\";\n      }\n      return cue;\n    });\n    const passed = this.#captions.cues.filter((cue) => cue.status === \"passed\");\n    const upcomingIndex = this.#captions.cues.findIndex((cue) => cue.status === \"upcoming\");\n    if (upcomingIndex > 0) {\n      this.#captions.cues[upcomingIndex].status = \"next\";\n    }\n    if (passed && passed.length > 0) {\n      this.#captions.cues[passed.length - 1].status = \"previous\";\n    }\n    this.#captions.cues = this.#captions.cues.map((cue) => {\n      if (cue.subCues) {\n        cue.subCues.map((sub) => {\n          sub.status = sub.seconds < this.#playhead ? \"sub_active\" : \"sub_upcoming\";\n          return sub;\n        });\n      }\n      return cue;\n    });\n  }\n  #scrollToCue() {\n    if (!this.#currentCue || this.#currentCue < 0)\n      return;\n    if (this.#debounceScrolling)\n      return;\n    const elms = this.#divs.root.querySelectorAll(\"li\");\n    const elm = elms[this.#currentCue];\n    if (!elm)\n      return;\n    const elmHeight = elm.offsetHeight;\n    const elmOffset = elm.offsetTop;\n    this.#divs.root.scrollTop = elmOffset - elmHeight;\n    this.#isAutoScroll = true;\n    setTimeout(() => {\n      this.#isAutoScroll = false;\n    }, 1e3);\n  }\n  #displayNoCaptions() {\n    this.#divs.root?.classList.add(\"hidden\");\n    if (!this.#divs.empty) {\n      this.#divs.root.innerHTML = \"\";\n      return;\n    }\n    if (this.#divs.empty?.innerHTML === \"\") {\n      this.#divs.empty.innerHTML = \"No captions.\";\n      return;\n    }\n    this.#divs.empty.classList.remove(\"hidden\");\n  }\n  #removeNoCaptions() {\n    this.#divs.empty?.classList.add(\"hidden\");\n  }\n  #event(name, value, object) {\n    this.dispatchEvent(new CustomEvent(\"all\", { detail: { name, value, full: object } }));\n    this.dispatchEvent(new CustomEvent(name, { detail: { value, full: object } }));\n  }\n  async #renderCaptionSrc(src) {\n    if (!this.#divs.root.querySelector(\"#tempVid\")) {\n      const track = document.createElement(\"track\");\n      track.mode = \"active\";\n      track.default = true;\n      track.src = src;\n      const video = document.createElement(\"video\");\n      video.preload = \"auto\";\n      video.setAttribute(\"id\", \"tempVid\");\n      video.appendChild(track);\n      this.#divs.root.appendChild(video);\n    }\n    const videodiv = this.#divs.root.querySelector(\"#tempVid\");\n    const subtitleTrack = await CaptionsViewer.trackReady(videodiv).catch((e) => {\n      this.#event(\"error\", \"No Tracks found.\", e);\n    });\n    await CaptionsViewer.cuesReady(subtitleTrack).catch((e) => {\n      this.#event(\"error\", \"No cues found in track.\", e);\n    });\n    return videodiv.textTracks[0];\n  }\n  static trackReady(video, lang) {\n    let count = 0;\n    return new Promise((resolve, reject) => {\n      const interval = setInterval(() => {\n        count += 1;\n        if (count > 1e3) {\n          clearInterval(interval);\n          reject(new Error(\"No tracks found in time.\"));\n        }\n        const textTracks = Array.from(video.textTracks);\n        if (textTracks.length > 0) {\n          const subtitles = lang ? textTracks.find((track) => track.language === lang) : textTracks.find((track) => track.kind === \"captions\" || track.kind === \"subtitles\");\n          if (subtitles) {\n            clearInterval(interval);\n            resolve(subtitles);\n          }\n        }\n      }, 2);\n    });\n  }\n  static cuesReady(track) {\n    let count = 0;\n    return new Promise((resolve, reject) => {\n      const interval = setInterval(() => {\n        count += 1;\n        if (count > 1e3) {\n          clearInterval(interval);\n          reject(new Error(\"No cues found in time.\"));\n        }\n        if (track.cues && track.cues.length > 0) {\n          clearInterval(interval);\n          resolve(track.cues);\n        }\n      }, 2);\n    });\n  }\n  #youtubeAdjustments(cues) {\n    this.#captions.cues.splice(1, 1);\n    let newCues;\n    newCues = cues.map((cue, index) => {\n      if (cue.text.length > 0 && index !== 1) {\n        cue.text.shift();\n      }\n      return cue;\n    });\n    newCues = cues.filter((cue) => cue.text.length !== 0);\n    newCues = cues.filter((cue) => cue.text[0] && cue.text[0].length !== 0);\n    return newCues;\n  }\n  async #connectCaptions(player, lang) {\n    const track = await CaptionsViewer.trackReady(player, lang).catch(() => void 0);\n    if (!track) {\n      return new Error(\"No subtitle track found.\", player.textTracks);\n    }\n    track.mode = \"hidden\";\n    await CaptionsViewer.cuesReady(track);\n    this.textTrack = track;\n    track.addEventListener(\"cuechange\", (e) => {\n      this.updateCues(e.target);\n    });\n    return track;\n  }\n  #connectPlayhead(player, refresh = 0) {\n    if (!player) {\n      this.#event(\"error\", \"player is not defined.\");\n      return;\n    }\n    if (refresh === 0) {\n      player.addEventListener(\"timeupdate\", () => {\n        this.#playhead = player.currentTime;\n        this.#update(this.#playhead);\n      });\n    }\n    let hasPlayed = false;\n    player.addEventListener(\"play\", () => {\n      hasPlayed = true;\n    });\n    if (refresh > 0) {\n      let pingInterval;\n      player.addEventListener(\"play\", () => {\n        this.#playhead = player.currentTime;\n        pingInterval = setInterval(() => {\n          this.#playhead = player.currentTime;\n          this.#update(this.#playhead);\n        });\n      }, refresh);\n      player.addEventListener(\"pause\", () => {\n        clearInterval(pingInterval);\n      });\n    }\n    player.addEventListener(\"seeking\", () => {\n      this.#debounceScrolling = false;\n    });\n    this.addEventListener(\"seek\", (e) => {\n      if (!hasPlayed)\n        player.play();\n      player.currentTime = e.detail.value;\n    });\n  }\n  // ********* Public Methods ********* //\n  async setTrack(player, lang) {\n    console.warn(\"setTrack was renamed to config.\");\n    return this.config({ player, lang });\n  }\n  config(CONFIG) {\n    if (!CONFIG.player) {\n      this.#event(\"error\", \"player is not defined.\");\n      return;\n    }\n    const refresh = CONFIG.refresh || void 0;\n    const lang = CONFIG.language || void 0;\n    const setPlayhead = CONFIG.setPlayhead === void 0 || CONFIG.setPlayhead === false;\n    const setCaptions = CONFIG.setCaptions === void 0 || CONFIG.setCaptions === false;\n    if (setPlayhead)\n      this.#connectPlayhead(CONFIG.player, refresh);\n    if (setCaptions)\n      this.#connectCaptions(CONFIG.player, lang);\n  }\n  // textTrack.cues would be the complete cue list plus more.\n  async updateCues(textTrack) {\n    if (!textTrack)\n      return \"\";\n    const prevLength = this.#captions.cues ? this.#captions.cues.length : 0;\n    if (textTrack.cues.length <= prevLength)\n      return \"\";\n    const newCaptions = await this.#parse(textTrack);\n    this.#captions.cues = newCaptions.cues;\n    this.#setCuesStatus();\n    newCaptions.cues.splice(0, prevLength);\n    let html = \"\";\n    newCaptions.cues.forEach((cue, index) => {\n      html += this.#cueToHTML(cue, index + prevLength, this.#disable);\n    });\n    const contianer = this.#divs.root.querySelector(\"ol\");\n    if (contianer)\n      contianer.innerHTML += html;\n    if (!contianer) {\n      this.#divs.root.innerHTML = `<ol>${html}</ol>`;\n    }\n    this.#update(this.#playhead);\n    return html;\n  }\n  pause() {\n    this.#paused = !this.#paused;\n  }\n  setTheme(userPreference = void 0) {\n    const theme = getTheme(userPreference || this.#theme || \"\");\n    this.#theme = theme;\n    this.#divs.root.dataset.theme = theme;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "dist/captions-viewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/captions-viewer.min.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "u",
          "default": "class extends HTMLElement{#S=!1;#t;#u=\"\";#i=0;#d=\"400px\";#a=4e3;#y=!1;#m=\"\";#p=\"\";#f=\"\";#g=!1;#o=!0;#e={};#n=void 0;#r=!1;#b=!1;#c={};#x=5;#l=.5;#T=!1;css=L();constructor(){super(),this.isConnected&&this.#w()}static get observedAttributes(){return[\"src\",\"playhead\",\"height\",\"debounce\",\"singleline\",\"color\",\"disable\",\"spacer\",\"enableCSS\"]}attributeChangedCallback(t,s,e){if(t===\"playhead\"){this.#h(e);return}if(t===\"debounce\"){this.#a=e;return}this.#v({changes:{name:t,oldValue:s,newValue:e}})}get captions(){return this.#e}get debounce(){return this.#a}set debounce(t){if(typeof t!=\"number\"){this.#s(\"error\",\"debounce must be a number.\");return}t?this.setAttribute(\"debounce\",t):this.removeAttribute(\"debounce\")}get debounceScrolling(){return this.#r}set debounceScrolling(t){if(typeof t!=\"boolean\"){this.#s(\"error\",\"debounceScrolling must be a boolean.\");return}this.#r=t}get disable(){return this.#p}set disable(t){if(typeof t!=\"string\"){this.#s(\"error\",\"Disable must be a string.\");return}this.setAttribute(\"disable\",t),t?this.setAttribute(\"disable\",t):this.removeAttribute(\"disabled\")}get enableCSS(){return this.#o}set enableCSS(t){if(typeof t!=\"boolean\"){this.#s(\"error\",\"enableCSS must be a boolean.\");return}this.#o=t}get height(){return this.#d}set height(t){if(typeof t!=\"string\"){this.#s(\"error\",\"height must be a string with a unit value.\");return}this.setAttribute(\"height\",t)}get nudge(){return this.#l}set nudge(t){if(typeof t!=\"number\"){this.#s(\"error\",\"nudge must be a number\");return}this.#l=t}get paused(){return this.#b}set paused(t){this.passed(t)}get singleline(){return this.#y}set singleline(t){if(typeof t!=\"boolean\"){this.#s(\"error\",\"singleline must be a boolean.\");return}this.setAttribute(\"singleline\",t)}get playhead(){return this.#i}set playhead(t){if(typeof t!=\"number\"){this.#s(\"error\",\"playhead must be a number.\");return}this.setAttribute(\"playhead\",t)}get spacer(){return this.#x}set spacer(t){if(typeof t!=\"number\"){this.#s(\"error\",\"spacer must be a number.\");return}this.#x=t}get src(){return this.#u}set src(t){if(typeof t!=\"string\"){this.#s(\"error\",\"src must be a string.\");return}t?this.setAttribute(\"src\",t):this.removeAttribute(\"src\")}get textTrack(){return this.#c}set textTrack(t){this.#c=t,this.#v({changes:{name:\"textTrack\"}})}get theme(){return this.#f}set theme(t){this.setTheme(t)}get youtube(){return this.#g}set youtube(t){if(typeof t!=\"boolean\"){this.#s(\"error\",\"youtube must be a boolean.\");return}this.#g=t}connectedCallback(){this.#w()}#w(){if(this.#S){this.#v();return}this.#S=!0;let t=document.createElement(\"template\");t.innerHTML=`\n      ${this.css}\n      <captionselement id=\"root\" data-theme=\"\"></captionselement>\n    `;let s=t.content.cloneNode(!0);this.appendChild(s),this.#t={root:this.querySelector(\"#root\"),empty:this.querySelector(\"captions-viewer-empty\")},this.#t.root.addEventListener(\"click\",e=>{let i=e.composedPath()[0].closest(\"button\");if(i&&\"localName\"in i&&i.localName===\"button\"){let n=i.dataset.start;this.#s(\"seek\",n),this.#h(n+.2)}}),this.#L(),this.#v()}async#v(t){if(this.#u=this.getAttribute(\"src\")||this.#u,this.#i=parseInt(this.getAttribute(\"playhead\"),10)||this.#i,this.#d=this.getAttribute(\"height\")||this.#d,this.#a=parseInt(this.getAttribute(\"debounce\"),10)||this.#a,this.#y=this.getAttribute(\"singleline\")===\"true\"||this.getAttribute(\"singleline\")===!0||!1,this.#m=this.getAttribute(\"color\")||this.#m,this.#p=this.getAttribute(\"disable\")||\"\",this.#f=this.getAttribute(\"theme\")||this.#f,this.#g=this.getAttribute(\"youtube\")===\"true\"||this.getAttribute(\"youtube\")===!0||this.#g,this.#o=this.getAttribute(\"stylesheet\")||this.#o,!this.#u&&!(this.#c&&\"id\"in this.#c)){this.#A();return}if(this.#o===\"false\"||this.#o===!1){let e=this.querySelector(\"#theme_a\");e.innerHTML=\"\"}this.setTheme();let s=[];if(this.#d!==\"400px\"&&s.push(`height: ${this.#d}`),this.#m&&s.push(`--base: ${this.#m}`),this.#t.root?.setAttribute(\"style\",s.join(\"; \")),t?.changes.name===\"src\"||t?.changes.name===\"textTrack\"){if(this.#e=await this.#C(this.#c,this.#u),!this.#e||!this.#e.cues)return;this.#s(\"parsed\",\"Caption file has been parsed.\",this.#e),this.#g&&(this.#e.cues=this.#B(this.#e.cues)),this.#k(),this.#h(this.#i+.9)}this.#q(),this.#t.root.innerHTML=this.#$(this.#e)}async#C(t,s){let e,i=t;if(s&&m(s)===\"vtt\"&&(i=await this.#H(s)),i&&\"cues\"in i&&(e=k(i)),s&&(!e||!e.cues)){let n=await fetch(s).then(c=>c.text()),o=m(s);n&&(e=S(n,o))}return!e||!e.cues?(this.#A(),null):(e.cues=w(e.cues),e.cues=A(e.cues),e.cues=C(e.cues,this.#x),e.cues=E(e.cues),this.#c=i,e)}#L(){let t=!1,s,e=()=>{this.#t.root.classList.add(\"scrolling\")},i=()=>{this.#t.root.classList.remove(\"scrolling\")};this.#t.root.addEventListener(\"touchstart\",()=>{t=!0,this.#r=!0,clearTimeout(s),e()},{passive:!0}),this.#t.root.addEventListener(\"touchend\",()=>{t=!1,s=setTimeout(()=>{t=!1,this.#r=!1,i()},this.#a)}),setTimeout(()=>{this.#t.root.addEventListener(\"scroll\",()=>{t||this.#T||(this.#r===!0&&clearTimeout(s),this.#r=!0,e(),s=setTimeout(()=>{this.#r=!1,i()},this.#a))},!1)},1e3)}#h(t){if(this.#b||(this.#i=t,!this.#e||!this.#e.cues))return;this.#k();let s=this.#e.cues?.findIndex(i=>i.status===\"active\");if(this.#e.cues?.forEach((i,n)=>{if(i.type===\"spacer\"&&i.status===\"active\"){let o=Math.round(this.#i-i.seconds.start),c=this.#t.root.querySelector(`[data-progress=\"${n}\"]`);c&&o&&(c.value=o)}}),this.#t.root.querySelectorAll(\".active\")?.forEach(i=>{let{index:n}=i.dataset,o=this.#e.cues[n];if(o.subCues){let c=i.querySelector(\".text\");c.innerHTML=o.subCues.map(h=>`<span class=\"${h.status}\">${h.text}</span>`).join(\"\")}}),s===this.#n)return;this.#n=s,this.#s(\"cuechange\",this.#e.cues[this.#n]);let e=this.#t.root.querySelectorAll(\"[data-progress]\");if(e&&[...e].forEach(i=>{if(i.value===0)return;let n=i;n.value=0}),this.#r){let n=this.#t.root.querySelectorAll(\"[data-index]\")[this.#n];n&&(T(n,\"captionselement\")||(this.#r=!1))}this.#M(),this.#I()}#$(t){if(!t)return\"\";let s=this.#p?this.#p.split(\"|\"):[],e=\"<ol>\";return t.cues?.forEach((i,n)=>{e+=this.#E(i,n,s)}),e+=\"</ol>\",e}#E(t,s,e){if(!t.timecode)return\"\";let i=t.status||\"\",n=`<span class=\"timecode\">${y(t.timecode.start)}</span>`,o=t.chapter?`<span class=\"chapter\">${t.chapter}</span>`:\"\",c=this.#y?\" \":\"<br />\",h=\"\";t.type===\"spacer\"&&(h=`<progress max=\"${Math.round(t.seconds.end-t.seconds.start)}\" value=\"0\" data-progress=\"${s}\"></progress>`);let a=`<span class=\"text\">${t.text.join(c)}</span>`;return t.subCues&&(a='<span class=\"text\">',a+=t.subCues.map(l=>`<span class=\"${l.status}\">${l.text}</span>`).join(\"\"),a+=\"</span>\"),`<li class=\"cueitem\">\n      <button\n        type=\"button\"\n        tabindex=\"0\"\n        data-start=\"${t.seconds.start}\"\n        class=\"cue ${i} ${t.type||\"\"}\"\n        data-index=\"${s}\"\n        style=\"animation-duration: ${Math.round(t.seconds.end-t.seconds.start)}s\"\n      >${!e.includes(\"timecode\")&&t.type!==\"spacer\"?n:\"\"} ${e.includes(\"chapters\")?\"\":o} ${e.includes(\"text\")?\"\":a} ${h}\n      </button></li>`}#M(){this.#t.root.querySelectorAll(\".cueitem\").forEach((s,e)=>{let i=this.#e.cues[e];s.firstElementChild.classList.remove(\"upcoming\",\"next\",\"active\",\"previous\",\"passed\"),s.firstElementChild.classList.add(i?.status)})}#k(){if(!this.#e||!(\"cues\"in this.#e))return;this.#e.cues=this.#e.cues.map(e=>(e.seconds.end-this.#l<this.#i&&(e.active=!1,e.status=\"passed\"),e.seconds.start-this.#l>this.#i&&(e.active=!1,e.status=\"upcoming\"),e.seconds.start-this.#l<this.#i&&e.seconds.end-this.#l>this.#i&&(e.active=!0,e.status=\"active\"),e));let t=this.#e.cues.filter(e=>e.status===\"passed\"),s=this.#e.cues.findIndex(e=>e.status===\"upcoming\");s>0&&(this.#e.cues[s].status=\"next\"),t&&t.length>0&&(this.#e.cues[t.length-1].status=\"previous\"),this.#e.cues=this.#e.cues.map(e=>(e.subCues&&e.subCues.map(i=>(i.status=i.seconds<this.#i?\"sub_active\":\"sub_upcoming\",i)),e))}#I(){if(!this.#n||this.#n<0||this.#r)return;let s=this.#t.root.querySelectorAll(\"li\")[this.#n];if(!s)return;let e=s.offsetHeight,i=s.offsetTop;this.#t.root.scrollTop=i-e,this.#T=!0,setTimeout(()=>{this.#T=!1},1e3)}#A(){if(this.#t.root?.classList.add(\"hidden\"),!this.#t.empty){this.#t.root.innerHTML=\"\";return}if(this.#t.empty?.innerHTML===\"\"){this.#t.empty.innerHTML=\"No captions.\";return}this.#t.empty.classList.remove(\"hidden\")}#q(){this.#t.empty?.classList.add(\"hidden\")}#s(t,s,e){this.dispatchEvent(new CustomEvent(\"all\",{detail:{name:t,value:s,full:e}})),this.dispatchEvent(new CustomEvent(t,{detail:{value:s,full:e}}))}async#H(t){if(!this.#t.root.querySelector(\"#tempVid\")){let i=document.createElement(\"track\");i.mode=\"active\",i.default=!0,i.src=t;let n=document.createElement(\"video\");n.preload=\"auto\",n.setAttribute(\"id\",\"tempVid\"),n.appendChild(i),this.#t.root.appendChild(n)}let s=this.#t.root.querySelector(\"#tempVid\"),e=await u.trackReady(s).catch(i=>{this.#s(\"error\",\"No Tracks found.\",i)});return await u.cuesReady(e).catch(i=>{this.#s(\"error\",\"No cues found in track.\",i)}),s.textTracks[0]}static trackReady(t,s){let e=0;return new Promise((i,n)=>{let o=setInterval(()=>{e+=1,e>1e3&&(clearInterval(o),n(new Error(\"No tracks found in time.\")));let c=Array.from(t.textTracks);if(c.length>0){let h=s?c.find(a=>a.language===s):c.find(a=>a.kind===\"captions\"||a.kind===\"subtitles\");h&&(clearInterval(o),i(h))}},2)})}static cuesReady(t){let s=0;return new Promise((e,i)=>{let n=setInterval(()=>{s+=1,s>1e3&&(clearInterval(n),i(new Error(\"No cues found in time.\"))),t.cues&&t.cues.length>0&&(clearInterval(n),e(t.cues))},2)})}#B(t){this.#e.cues.splice(1,1);let s;return s=t.map((e,i)=>(e.text.length>0&&i!==1&&e.text.shift(),e)),s=t.filter(e=>e.text.length!==0),s=t.filter(e=>e.text[0]&&e.text[0].length!==0),s}async#j(t,s){let e=await u.trackReady(t,s).catch(()=>{});return e?(e.mode=\"hidden\",await u.cuesReady(e),this.textTrack=e,e.addEventListener(\"cuechange\",i=>{this.updateCues(i.target)}),e):new Error(\"No subtitle track found.\",t.textTracks)}#P(t,s=0){if(!t){this.#s(\"error\",\"player is not defined.\");return}s===0&&t.addEventListener(\"timeupdate\",()=>{this.#i=t.currentTime,this.#h(this.#i)});let e=!1;if(t.addEventListener(\"play\",()=>{e=!0}),s>0){let i;t.addEventListener(\"play\",()=>{this.#i=t.currentTime,i=setInterval(()=>{this.#i=t.currentTime,this.#h(this.#i)})},s),t.addEventListener(\"pause\",()=>{clearInterval(i)})}t.addEventListener(\"seeking\",()=>{this.#r=!1}),this.addEventListener(\"seek\",i=>{e||t.play(),t.currentTime=i.detail.value})}async setTrack(t,s){return console.warn(\"setTrack was renamed to config.\"),this.config({player:t,lang:s})}config(t){if(!t.player){this.#s(\"error\",\"player is not defined.\");return}let s=t.refresh||void 0,e=t.language||void 0,i=t.setPlayhead===void 0||t.setPlayhead===!1,n=t.setCaptions===void 0||t.setCaptions===!1;i&&this.#P(t.player,s),n&&this.#j(t.player,e)}async updateCues(t){if(!t)return\"\";let s=this.#e.cues?this.#e.cues.length:0;if(t.cues.length<=s)return\"\";let e=await this.#C(t);this.#e.cues=e.cues,this.#k(),e.cues.splice(0,s);let i=\"\";e.cues.forEach((o,c)=>{i+=this.#E(o,c+s,this.#p)});let n=this.#t.root.querySelector(\"ol\");return n&&(n.innerHTML+=i),n||(this.#t.root.innerHTML=`<ol>${i}</ol>`),this.#h(this.#i),i}pause(){this.#b=!this.#b}setTheme(t=void 0){let s=x(t||this.#f||\"\");this.#f=s,this.#t.root.dataset.theme=s}}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "u",
            "module": "dist/captions-viewer.min.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/CaptionsViewer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CaptionsViewer",
          "members": [
            {
              "kind": "field",
              "name": "#isInit",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#divs",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#src",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#playhead",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "'400px'"
            },
            {
              "kind": "field",
              "name": "#debounce",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4000"
            },
            {
              "kind": "field",
              "name": "#singleline",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#color",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#disable",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#theme",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#youtube",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#enableCSS",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#captions",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#currentCue",
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "#debounceScrolling",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#paused",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#textTrack",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#spacer",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "5"
            },
            {
              "kind": "field",
              "name": "#nudge",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5"
            },
            {
              "kind": "field",
              "name": "#isAutoScroll",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "css"
            },
            {
              "kind": "field",
              "name": "captions"
            },
            {
              "kind": "field",
              "name": "debounce"
            },
            {
              "kind": "field",
              "name": "debounceScrolling"
            },
            {
              "kind": "field",
              "name": "disable"
            },
            {
              "kind": "field",
              "name": "enableCSS"
            },
            {
              "kind": "field",
              "name": "height"
            },
            {
              "kind": "field",
              "name": "nudge"
            },
            {
              "kind": "field",
              "name": "paused"
            },
            {
              "kind": "field",
              "name": "singleline"
            },
            {
              "kind": "field",
              "name": "playhead"
            },
            {
              "kind": "field",
              "name": "spacer"
            },
            {
              "kind": "field",
              "name": "src"
            },
            {
              "kind": "field",
              "name": "textTrack"
            },
            {
              "kind": "field",
              "name": "theme"
            },
            {
              "kind": "field",
              "name": "youtube"
            },
            {
              "kind": "method",
              "name": "#init"
            },
            {
              "kind": "method",
              "name": "#create",
              "parameters": [
                {
                  "name": "params"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#parse",
              "parameters": [
                {
                  "name": "TEXTTRACK"
                },
                {
                  "name": "SRC"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setScrollingEvents"
            },
            {
              "kind": "method",
              "name": "#update",
              "parameters": [
                {
                  "name": "playhead"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderAllCaptions",
              "parameters": [
                {
                  "name": "captions"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#cueToHTML",
              "parameters": [
                {
                  "name": "cue"
                },
                {
                  "name": "index"
                },
                {
                  "name": "disabled"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#updateCaptionClasses"
            },
            {
              "kind": "method",
              "name": "#setCuesStatus"
            },
            {
              "kind": "method",
              "name": "#scrollToCue"
            },
            {
              "kind": "method",
              "name": "#displayNoCaptions"
            },
            {
              "kind": "method",
              "name": "#removeNoCaptions"
            },
            {
              "kind": "method",
              "name": "#event",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "object"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderCaptionSrc",
              "parameters": [
                {
                  "name": "src"
                }
              ]
            },
            {
              "kind": "method",
              "name": "trackReady",
              "static": true,
              "parameters": [
                {
                  "name": "video"
                },
                {
                  "name": "lang"
                }
              ]
            },
            {
              "kind": "method",
              "name": "cuesReady",
              "static": true,
              "parameters": [
                {
                  "name": "track"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#youtubeAdjustments",
              "parameters": [
                {
                  "name": "cues"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#connectCaptions",
              "parameters": [
                {
                  "name": "player"
                },
                {
                  "name": "lang"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#connectPlayhead",
              "parameters": [
                {
                  "name": "player"
                },
                {
                  "name": "refresh",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setTrack",
              "parameters": [
                {
                  "name": "player"
                },
                {
                  "name": "lang"
                }
              ]
            },
            {
              "kind": "method",
              "name": "config",
              "parameters": [
                {
                  "name": "CONFIG"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateCues",
              "parameters": [
                {
                  "name": "textTrack"
                }
              ]
            },
            {
              "kind": "method",
              "name": "pause"
            },
            {
              "kind": "method",
              "name": "setTheme",
              "parameters": [
                {
                  "name": "userPreference",
                  "default": "undefined"
                }
              ]
            }
          ],
          "events": [
            {
              "name": "all",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "src"
            },
            {
              "name": "playhead"
            },
            {
              "name": "height"
            },
            {
              "name": "debounce"
            },
            {
              "name": "singleline"
            },
            {
              "name": "color"
            },
            {
              "name": "disable"
            },
            {
              "name": "spacer"
            },
            {
              "name": "enableCSS"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "captions-viewer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CaptionsViewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/unpublished/Remove Duplicates alterantives.js",
      "declarations": [
        {
          "kind": "function",
          "name": "removeDuplicateCuesA",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeDuplicateCuesB",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeDuplicateCuesC",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "removeDuplicateCuesA",
          "declaration": {
            "name": "removeDuplicateCuesA",
            "module": "demo/unpublished/Remove Duplicates alterantives.js"
          }
        },
        {
          "kind": "js",
          "name": "removeDuplicateCuesB",
          "declaration": {
            "name": "removeDuplicateCuesB",
            "module": "demo/unpublished/Remove Duplicates alterantives.js"
          }
        },
        {
          "kind": "js",
          "name": "removeDuplicateCuesC",
          "declaration": {
            "name": "removeDuplicateCuesC",
            "module": "demo/unpublished/Remove Duplicates alterantives.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/themes/stylesheet.js",
      "declarations": [
        {
          "kind": "function",
          "name": "defaultStyles"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultStyles",
          "declaration": {
            "name": "defaultStyles",
            "module": "src/themes/stylesheet.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/cues.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parseSubTextCues",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        },
        {
          "kind": "function",
          "name": "addCueSpaces",
          "parameters": [
            {
              "name": "cues"
            },
            {
              "name": "distance"
            }
          ]
        },
        {
          "kind": "function",
          "name": "sortCues",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeDuplicateCues",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseSubTextCues",
          "declaration": {
            "name": "parseSubTextCues",
            "module": "src/utilities/cues.js"
          }
        },
        {
          "kind": "js",
          "name": "addCueSpaces",
          "declaration": {
            "name": "addCueSpaces",
            "module": "src/utilities/cues.js"
          }
        },
        {
          "kind": "js",
          "name": "sortCues",
          "declaration": {
            "name": "sortCues",
            "module": "src/utilities/cues.js"
          }
        },
        {
          "kind": "js",
          "name": "removeDuplicateCues",
          "declaration": {
            "name": "removeDuplicateCues",
            "module": "src/utilities/cues.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/cues_as_class.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CueUtilities",
          "members": [
            {
              "kind": "field",
              "name": "#cues",
              "privacy": "private",
              "type": {
                "text": "null"
              },
              "default": "cues"
            },
            {
              "kind": "method",
              "name": "parseSubTextCue",
              "static": true,
              "parameters": [
                {
                  "name": "text"
                },
                {
                  "name": "startSec"
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseSubTextCues"
            },
            {
              "kind": "method",
              "name": "addCueSpaces",
              "parameters": [
                {
                  "name": "distance"
                }
              ]
            },
            {
              "kind": "method",
              "name": "sortCues"
            },
            {
              "kind": "method",
              "name": "removeDuplicateCues"
            },
            {
              "kind": "method",
              "name": "pruneCues",
              "parameters": [
                {
                  "name": "total",
                  "default": "200"
                }
              ]
            },
            {
              "kind": "method",
              "name": "get"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CueUtilities",
          "declaration": {
            "name": "CueUtilities",
            "module": "src/utilities/cues_as_class.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/parsers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parseTextTrack",
          "parameters": [
            {
              "name": "textTrack"
            }
          ]
        },
        {
          "kind": "function",
          "name": "parseVTT",
          "parameters": [
            {
              "name": "contents"
            },
            {
              "name": "type"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseTextTrack",
          "declaration": {
            "name": "parseTextTrack",
            "module": "src/utilities/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "parseVTT",
          "declaration": {
            "name": "parseVTT",
            "module": "src/utilities/parsers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/revai.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/utilities.js",
      "declarations": [
        {
          "kind": "function",
          "name": "timecodeToSeconds",
          "parameters": [
            {
              "name": "timecode",
              "default": "''"
            }
          ]
        },
        {
          "kind": "function",
          "name": "isTimecode",
          "parameters": [
            {
              "name": "input"
            }
          ]
        },
        {
          "kind": "function",
          "name": "prettyTimecode",
          "parameters": [
            {
              "name": "timecode"
            }
          ]
        },
        {
          "kind": "function",
          "name": "secondsToTimecode",
          "parameters": [
            {
              "name": "seconds",
              "default": "0"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getTheme",
          "parameters": [
            {
              "name": "userPreference"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getSupportedFileType",
          "parameters": [
            {
              "name": "file"
            }
          ]
        },
        {
          "kind": "function",
          "name": "isElementInViewport",
          "parameters": [
            {
              "name": "el"
            },
            {
              "name": "container"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "timecodeToSeconds",
          "declaration": {
            "name": "timecodeToSeconds",
            "module": "src/utilities/utilities.js"
          }
        },
        {
          "kind": "js",
          "name": "isTimecode",
          "declaration": {
            "name": "isTimecode",
            "module": "src/utilities/utilities.js"
          }
        },
        {
          "kind": "js",
          "name": "prettyTimecode",
          "declaration": {
            "name": "prettyTimecode",
            "module": "src/utilities/utilities.js"
          }
        },
        {
          "kind": "js",
          "name": "secondsToTimecode",
          "declaration": {
            "name": "secondsToTimecode",
            "module": "src/utilities/utilities.js"
          }
        },
        {
          "kind": "js",
          "name": "getTheme",
          "declaration": {
            "name": "getTheme",
            "module": "src/utilities/utilities.js"
          }
        },
        {
          "kind": "js",
          "name": "getSupportedFileType",
          "declaration": {
            "name": "getSupportedFileType",
            "module": "src/utilities/utilities.js"
          }
        },
        {
          "kind": "js",
          "name": "isElementInViewport",
          "declaration": {
            "name": "isElementInViewport",
            "module": "src/utilities/utilities.js"
          }
        }
      ]
    }
  ]
}
