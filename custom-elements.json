{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "captions-viewer.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "/src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CaptionsViewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "./src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/captions-viewer.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "CaptionsViewer",
          "default": "class extends HTMLElement {\n  #isInit = false;\n  #divs;\n  // Params\n  #src = \"\";\n  // location of a vtt src.\n  #playhead = 0;\n  // current seconds from start.\n  #height = \"400px\";\n  // Hight of container, applied as inline style.\n  #debounce = 4e3;\n  // In seconds how long to\n  #singleline = false;\n  #color = \"\";\n  // Base 360 color for text.\n  #disable = \"\";\n  // What vtt properties to disable, uses |\n  #theme = \"\";\n  // blank/light or dark.  Dark shows lighter text.\n  #youtube = false;\n  // Makes vtt cue adjustments specific to YouTube.\n  #enableCSS = true;\n  // Removal of default styles.\n  // Internal\n  #captions = {};\n  // Master array of the cues.\n  #currentCue = void 0;\n  // for parser.\n  #debounceScrolling = false;\n  // for throttling scrolling.\n  #paused = false;\n  // toggle scrolling and highlighting.\n  #textTrack = {};\n  // Native textTrack from video element.\n  #spacer = 5;\n  // Time in sec between cues where the progres bar cue will be shown.\n  #nudge = 0.5;\n  // Time in sec to start the cue early. comp for css transition.\n  #isAutoScroll = false;\n  css = defaultStyles();\n  constructor() {\n    super();\n    if (this.isConnected) {\n      this.#init();\n    }\n  }\n  static get observedAttributes() {\n    return [\n      \"src\",\n      \"playhead\",\n      \"height\",\n      \"debounce\",\n      \"singleline\",\n      \"color\",\n      \"disable\",\n      \"spacer\"\n    ];\n  }\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === \"playhead\") {\n      this.#updateCaptionStatus(newValue);\n      return;\n    }\n    if (name === \"debounce\") {\n      this.#debounce = newValue;\n      return;\n    }\n    this.#create({ changes: { name, oldValue, newValue } });\n  }\n  set debounce(item) {\n    if (typeof item !== \"number\") {\n      console.warn(\"debounce must be a number.\", item);\n      this.#event(\"error\", \"debounce must be a number.\");\n      return;\n    }\n    if (item) {\n      this.setAttribute(\"debounce\", item);\n    } else {\n      this.removeAttribute(\"debounce\");\n    }\n  }\n  set debounceScrolling(item) {\n    if (typeof item !== \"boolean\") {\n      console.warn(\"debounceScrolling must be a boolean.\", item);\n      this.#event(\"error\", \"debounceScrolling must be a boolean.\");\n      return;\n    }\n    this.#debounceScrolling = item;\n  }\n  set disable(item) {\n    if (typeof item !== \"string\") {\n      console.warn(\"Disable must be a string.\", item);\n      this.#event(\"error\", \"Disable must be a string.\");\n      return;\n    }\n    this.setAttribute(\"disable\", item);\n    if (item) {\n      this.setAttribute(\"disable\", item);\n    } else {\n      this.removeAttribute(\"disabled\");\n    }\n  }\n  set playhead(item) {\n    if (typeof item !== \"number\") {\n      console.warn(\"playhead property must be a number.\", item);\n      this.#event(\"error\", \"playhead must be a number.\");\n      return;\n    }\n    this.setAttribute(\"playhead\", item);\n  }\n  set height(item) {\n    if (typeof item !== \"string\") {\n      console.warn(\"height must be a string with a unit value.\", item);\n      this.#event(\"error\", \"height must be a string with a unit value.\");\n      return;\n    }\n    this.setAttribute(\"height\", item);\n  }\n  set nudge(item) {\n    if (typeof item !== \"number\") {\n      console.warn(\"nudge must be a number.\", item);\n      this.#event(\"error\", \"nudge must be a number\");\n      return;\n    }\n    this.#nudge = item;\n  }\n  set singleline(item) {\n    if (typeof item !== \"boolean\") {\n      console.warn(\"singleline must be a boolean.\", item);\n      this.#event(\"error\", \"singleline must be a boolean.\");\n      return;\n    }\n    this.setAttribute(\"singleline\", item);\n  }\n  set spacer(item) {\n    if (typeof item !== \"number\") {\n      console.warn(\"spacer must be a number.\", item);\n      this.#event(\"error\", \"spacer must be a number.\");\n      return;\n    }\n    this.#spacer = item;\n  }\n  set src(item) {\n    if (typeof item !== \"string\") {\n      console.warn(\"src must be a string.\", item);\n      this.#event(\"error\", \"src must be a string.\");\n      return;\n    }\n    if (item) {\n      this.setAttribute(\"src\", item);\n    } else {\n      this.removeAttribute(\"src\");\n    }\n  }\n  set textTrack(item) {\n    this.#textTrack = item;\n    this.#create({ changes: { name: \"textTrack\" } });\n  }\n  set youtube(item) {\n    if (typeof item !== \"boolean\") {\n      console.warn(\"youtube must be a boolean.\", item);\n      this.#event(\"error\", \"youtube must be a boolean.\");\n      return;\n    }\n    this.#youtube = item;\n  }\n  get captions() {\n    return this.#captions;\n  }\n  get debounce() {\n    return this.#debounce;\n  }\n  get disable() {\n    return this.#disable;\n  }\n  get enableCSS() {\n    return this.#enableCSS;\n  }\n  get height() {\n    return this.#height;\n  }\n  get nudge() {\n    return this.#nudge;\n  }\n  get paused() {\n    return this.#paused;\n  }\n  get playhead() {\n    return this.#playhead;\n  }\n  get singleline() {\n    return this.#singleline;\n  }\n  get spacer() {\n    return this.#spacer;\n  }\n  get src() {\n    return this.#src;\n  }\n  get textTrack() {\n    return this.#textTrack;\n  }\n  get theme() {\n    return this.#theme;\n  }\n  get youtube() {\n    return this.#youtube;\n  }\n  connectedCallback() {\n    this.#init();\n  }\n  #init() {\n    if (this.#isInit) {\n      this.#create();\n      return;\n    }\n    this.#isInit = true;\n    const template = document.createElement(\"template\");\n    template.innerHTML = `\n      ${this.css}\n      <captionselement id=\"root\" data-theme=\"\"></captionselement>\n    `;\n    const html = template.content.cloneNode(true);\n    this.appendChild(html);\n    this.#divs = {\n      root: this.querySelector(\"#root\"),\n      empty: this.querySelector(\"captions-viewer-empty\")\n    };\n    this.#divs.root.addEventListener(\"click\", (e) => {\n      const div = e.composedPath()[0].closest(\"button\");\n      if (div && \"localName\" in div && div.localName === \"button\") {\n        const seconds = div.dataset.start;\n        this.#event(\"seek\", seconds);\n        this.#updateCaptionStatus(seconds + 0.2);\n      }\n    });\n    this.#iniScrollingEvents();\n    this.#create();\n  }\n  async #create(params) {\n    this.#src = this.getAttribute(\"src\") || this.#src;\n    this.#playhead = parseInt(this.getAttribute(\"playhead\"), 10) || this.#playhead;\n    this.#height = this.getAttribute(\"height\") || this.#height;\n    this.#debounce = parseInt(this.getAttribute(\"debounce\"), 10) || this.#debounce;\n    this.#singleline = this.getAttribute(\"singleline\") === \"true\" || this.getAttribute(\"singleline\") === true || false;\n    this.#color = this.getAttribute(\"color\") || this.#color;\n    this.#disable = this.getAttribute(\"disable\") || \"\";\n    this.#theme = this.getAttribute(\"theme\") || this.#theme;\n    this.#youtube = this.getAttribute(\"youtube\") === \"true\" || this.getAttribute(\"youtube\") === true || this.#youtube;\n    this.#enableCSS = this.getAttribute(\"stylesheet\") || this.#enableCSS;\n    if (!this.#src && !(this.#textTrack && \"id\" in this.#textTrack)) {\n      this.#displayNoCaptions();\n      return;\n    }\n    if (this.#enableCSS === \"false\" || this.#enableCSS === false) {\n      const stylesheet = this.querySelector(\"#theme_a\");\n      stylesheet.innerHTML = \"\";\n    }\n    this.setTheme();\n    const customStyles = [];\n    if (this.#height !== \"400px\") {\n      customStyles.push(`height: ${this.#height}`);\n    }\n    if (this.#color) {\n      customStyles.push(`--base: ${this.#color}`);\n    }\n    this.#divs.root?.setAttribute(\"style\", customStyles.join(\"; \"));\n    if (params?.changes.name === \"src\" || params?.changes.name === \"textTrack\") {\n      this.#captions = await this.#parse(this.#textTrack, this.#src);\n      if (!this.#captions || !this.#captions.cues)\n        return;\n      this.#event(\"parsed\", \"Caption file has been parsed.\", this.#captions);\n      if (this.#youtube)\n        this.#captions.cues = this.#youtubeAdjustments(this.#captions.cues);\n      this.#setCuesStatus();\n      this.#updateCaptionStatus(this.#playhead + 0.9);\n    }\n    this.#removeNoCaptions();\n    this.#divs.root.innerHTML = this.#renderAllCaptions(this.#captions);\n  }\n  async #parse(TEXTTRACK, SRC) {\n    let captions;\n    let textTrack = TEXTTRACK;\n    if (SRC && Utilities.getSupportedFileType(SRC) === \"vtt\") {\n      textTrack = await this.#renderCaptionSrc(SRC);\n    }\n    if (textTrack && \"cues\" in textTrack) {\n      captions = parseTextTrack(textTrack);\n    }\n    if (SRC && (!captions || !captions.cues)) {\n      const srcContents = await fetch(SRC).then((res) => res.text());\n      const type = Utilities.getSupportedFileType(SRC);\n      if (srcContents)\n        captions = parseVTT(srcContents, type);\n    }\n    if (!captions || !captions.cues) {\n      console.error(\"Not able to find and render captions.\", captions);\n      this.#displayNoCaptions();\n      return void 0;\n    }\n    captions.cues = parseSubTextCues(captions.cues);\n    captions.cues = removeDuplicateCues(captions.cues);\n    captions.cues = addCueSpaces(captions.cues, this.#spacer);\n    captions.cues = sortCues(captions.cues);\n    this.#textTrack = textTrack;\n    return captions;\n  }\n  #iniScrollingEvents() {\n    let isTouch = false;\n    let timeout;\n    const addScrollStyle = () => {\n      this.#divs.root.classList.add(\"scrolling\");\n    };\n    const removeScrollStyle = () => {\n      this.#divs.root.classList.remove(\"scrolling\");\n    };\n    this.#divs.root.addEventListener(\"touchstart\", () => {\n      isTouch = true;\n      this.#debounceScrolling = true;\n      clearTimeout(timeout);\n      addScrollStyle();\n    });\n    this.#divs.root.addEventListener(\"touchend\", () => {\n      isTouch = false;\n      timeout = setTimeout(() => {\n        isTouch = false;\n        this.#debounceScrolling = false;\n        removeScrollStyle();\n      }, this.#debounce);\n    });\n    setTimeout(() => {\n      this.#divs.root.addEventListener(\"scroll\", () => {\n        if (isTouch)\n          return;\n        if (this.#isAutoScroll) {\n          return;\n        }\n        if (this.#debounceScrolling === true) {\n          clearTimeout(timeout);\n        }\n        this.#debounceScrolling = true;\n        addScrollStyle();\n        timeout = setTimeout(() => {\n          this.#debounceScrolling = false;\n          removeScrollStyle();\n        }, this.#debounce);\n      }, false);\n    }, 1e3);\n  }\n  #updateCaptionStatus(playhead) {\n    if (this.#paused)\n      return;\n    this.#playhead = playhead;\n    if (!this.#captions || !this.#captions.cues)\n      return;\n    this.#setCuesStatus();\n    const activeIndex = this.#captions.cues?.findIndex((cue) => cue.status === \"active\");\n    this.#captions.cues?.forEach((cue, index) => {\n      if (cue.type === \"spacer\" && cue.status === \"active\") {\n        const progValue = Math.round(this.#playhead - cue.seconds.start);\n        const progress = this.#divs.root.querySelector(`[data-progress=\"${index}\"]`);\n        if (progress && progValue)\n          progress.value = progValue;\n      }\n    });\n    this.#divs.root.querySelectorAll(\".active\")?.forEach((item) => {\n      const { index } = item.dataset;\n      const cue = this.#captions.cues[index];\n      if (cue.subCues) {\n        const textDiv = item.querySelector(\".text\");\n        textDiv.innerHTML = cue.subCues.map((sub) => `<span class=\"${sub.status}\">${sub.text}</span>`).join(\"\");\n      }\n    });\n    if (activeIndex === this.#currentCue) {\n      return;\n    }\n    this.#currentCue = activeIndex;\n    this.#event(\"cuechange\", this.#captions.cues[this.#currentCue]);\n    const progressbars = this.#divs.root.querySelectorAll(\"[data-progress]\");\n    if (progressbars) {\n      [...progressbars].forEach((bar) => {\n        const newBar = bar;\n        newBar.value = 0;\n      });\n    }\n    if (this.#debounceScrolling) {\n      const elms = this.#divs.root.querySelectorAll(\"[data-index]\");\n      const elm = elms[this.#currentCue];\n      if (elm) {\n        if (!CaptionsViewer.isElementInViewport(elm, \"captionselement\"))\n          this.#debounceScrolling = false;\n      }\n    }\n    this.#updateCaption();\n    this.#scrollToCue();\n  }\n  static isElementInViewport(el, container) {\n    const rect = el.getBoundingClientRect();\n    const parent = el.closest(container);\n    const parentRect = parent.getBoundingClientRect();\n    return rect.bottom <= parentRect.bottom;\n  }\n  #renderAllCaptions(captions) {\n    if (!captions)\n      return \"\";\n    const disabled = this.#disable ? this.#disable.split(\"|\") : [];\n    let html = \"<ol>\";\n    captions.cues?.forEach((cue, index) => {\n      html += this.#cueToHTML(cue, index, disabled);\n    });\n    html += \"</ol>\";\n    return html;\n  }\n  #cueToHTML(cue, index, disabled) {\n    if (!cue.timecode)\n      return \"\";\n    const styleName = cue.status || \"\";\n    const timecode = `<span class=\"timecode\">${Utilities.prettyTimecode(cue.timecode.start)}</span>`;\n    const chapter = cue.chapter ? `<span class=\"chapter\">${cue.chapter}</span>` : \"\";\n    const textJoiner = this.#singleline ? \" \" : \"<br />\";\n    let spacerProgress = \"\";\n    if (cue.type === \"spacer\") {\n      const progMax = Math.round(cue.seconds.end - cue.seconds.start);\n      spacerProgress = `<progress max=\"${progMax}\" value=\"0\" data-progress=\"${index}\"></progress>`;\n    }\n    let text = `<span class=\"text\">${cue.text.join(textJoiner)}</span>`;\n    if (cue.subCues) {\n      text = '<span class=\"text\">';\n      text += cue.subCues.map((sub) => `<span class=\"${sub.status}\">${sub.text}</span>`).join(\"\");\n      text += \"</span>\";\n    }\n    return `<li class=\"cueitem\">\n      <button\n        type=\"button\"\n        tabindex=\"0\"\n        data-start=\"${cue.seconds.start}\"\n        class=\"cue ${styleName} ${cue.type || \"\"}\"\n        data-index=\"${index}\"\n      >${!disabled.includes(\"timecode\") && cue.type !== \"spacer\" ? timecode : \"\"} ${!disabled.includes(\"chapters\") ? chapter : \"\"} ${!disabled.includes(\"text\") ? text : \"\"} ${spacerProgress}\n      </button></li>`;\n  }\n  #updateCaption() {\n    const divs = this.#divs.root.querySelectorAll(\".cueitem\");\n    divs.forEach((item, index) => {\n      const cue = this.#captions.cues[index];\n      item.firstElementChild.classList.remove(\"upcoming\", \"next\", \"active\", \"previous\", \"passed\");\n      item.firstElementChild.classList.add(cue?.status);\n    });\n  }\n  #setCuesStatus() {\n    if (!this.#captions || !(\"cues\" in this.#captions))\n      return;\n    this.#captions.cues = this.#captions.cues.map((cue) => {\n      if (cue.seconds.end - this.#nudge < this.#playhead) {\n        cue.active = false;\n        cue.status = \"passed\";\n      }\n      if (cue.seconds.start - this.#nudge > this.#playhead) {\n        cue.active = false;\n        cue.status = \"upcoming\";\n      }\n      if (cue.seconds.start - this.#nudge < this.#playhead && cue.seconds.end - this.#nudge > this.#playhead) {\n        cue.active = true;\n        cue.status = \"active\";\n      }\n      return cue;\n    });\n    const passed = this.#captions.cues.filter((cue) => cue.status === \"passed\");\n    const upcomingIndex = this.#captions.cues.findIndex((cue) => cue.status === \"upcoming\");\n    if (upcomingIndex > 0) {\n      this.#captions.cues[upcomingIndex].status = \"next\";\n    }\n    if (passed && passed.length > 0) {\n      this.#captions.cues[passed.length - 1].status = \"previous\";\n    }\n    this.#captions.cues = this.#captions.cues.map((cue) => {\n      if (cue.subCues) {\n        cue.subCues.map((sub) => {\n          sub.status = sub.seconds < this.#playhead ? \"sub_active\" : \"sub_upcoming\";\n          return sub;\n        });\n      }\n      return cue;\n    });\n  }\n  #scrollToCue() {\n    if (!this.#currentCue || this.#currentCue < 0)\n      return;\n    if (this.#debounceScrolling)\n      return;\n    const elms = this.#divs.root.querySelectorAll(\"li\");\n    const elm = elms[this.#currentCue];\n    if (!elm)\n      return;\n    const elmHeight = elm.offsetHeight;\n    const elmOffset = elm.offsetTop;\n    this.#divs.root.scrollTop = elmOffset - elmHeight;\n    this.#isAutoScroll = true;\n    setTimeout(() => {\n      this.#isAutoScroll = false;\n    }, 1e3);\n  }\n  #displayNoCaptions() {\n    this.#divs.root.classList.add(\"hidden\");\n    if (!this.#divs.empty) {\n      this.#divs.root.innerHTML = \"\";\n      return;\n    }\n    if (this.#divs.empty.innerHTML === \"\") {\n      this.#divs.empty.innerHTML = \"No captions.\";\n      return;\n    }\n    this.#divs.empty.classList.remove(\"hidden\");\n  }\n  #removeNoCaptions() {\n    this.#divs.empty.classList.add(\"hidden\");\n  }\n  pause() {\n    this.#paused = !this.#paused;\n  }\n  setTheme(userPreference = void 0) {\n    const theme = Utilities.getTheme(userPreference || this.#theme || \"\");\n    this.#theme = theme;\n    this.#divs.root.dataset.theme = theme;\n  }\n  // textTrack.cues would be the complete cue list plus more.\n  async updateCues(textTrack) {\n    if (!textTrack)\n      return \"\";\n    const prevLength = this.#captions.cues ? this.#captions.cues.length : 0;\n    if (textTrack.cues.length <= prevLength)\n      return \"\";\n    const newCaptions = await this.#parse(textTrack);\n    this.#captions.cues = newCaptions.cues;\n    this.#setCuesStatus();\n    newCaptions.cues.splice(0, prevLength);\n    let html = \"\";\n    newCaptions.cues.forEach((cue, index) => {\n      html += this.#cueToHTML(cue, index + prevLength, this.#disable);\n    });\n    const contianer = this.#divs.root.querySelector(\"ol\");\n    if (contianer)\n      contianer.innerHTML += html;\n    if (!contianer) {\n      this.#divs.root.innerHTML = `<ol>${html}</ol>`;\n    }\n    this.#updateCaptionStatus(this.#playhead);\n    return html;\n  }\n  #event(name, value, object) {\n    this.dispatchEvent(new CustomEvent(\"all\", { detail: { name, value, full: object } }));\n    this.dispatchEvent(new CustomEvent(name, { detail: { value, full: object } }));\n  }\n  async #renderCaptionSrc(src) {\n    if (!this.#divs.root.querySelector(\"#tempVid\")) {\n      const track = document.createElement(\"track\");\n      track.mode = \"active\";\n      track.default = true;\n      track.src = src;\n      const video = document.createElement(\"video\");\n      video.preload = \"auto\";\n      video.setAttribute(\"id\", \"tempVid\");\n      video.appendChild(track);\n      this.#divs.root.appendChild(video);\n    }\n    const videodiv = this.#divs.root.querySelector(\"#tempVid\");\n    const subtitleTrack = await CaptionsViewer.trackReady(videodiv).catch((e) => console.warn(e));\n    await CaptionsViewer.cuesReady(subtitleTrack).catch((e) => console.warn(e));\n    return videodiv.textTracks[0];\n  }\n  async setTrack(player, lang) {\n    const track = await CaptionsViewer.trackReady(player, lang).catch(() => void 0);\n    if (!track) {\n      return new Error(\"No subtitle track found.\", player.textTracks);\n    }\n    track.mode = \"hidden\";\n    await CaptionsViewer.cuesReady(track);\n    this.textTrack = track;\n    track.addEventListener(\"cuechange\", (e) => {\n      this.updateCues(e.target);\n    });\n    return track;\n  }\n  static trackReady(video, lang) {\n    let count = 0;\n    return new Promise((resolve, reject) => {\n      const interval = setInterval(() => {\n        count += 1;\n        if (count > 1e3) {\n          clearInterval(interval);\n          reject(new Error(\"No tracks found in time.\"));\n        }\n        const textTracks = Array.from(video.textTracks);\n        if (textTracks.length > 0) {\n          const subtitles = lang ? textTracks.find((track) => track.language === lang) : textTracks.find((track) => track.kind === \"captions\" || track.kind === \"subtitles\");\n          if (subtitles) {\n            clearInterval(interval);\n            resolve(subtitles);\n          }\n        }\n      }, 2);\n    });\n  }\n  static cuesReady(track) {\n    let count = 0;\n    return new Promise((resolve, reject) => {\n      const interval = setInterval(() => {\n        count += 1;\n        if (count > 1e3) {\n          clearInterval(interval);\n          reject(new Error(\"No cues found in time.\"));\n        }\n        if (track.cues && track.cues.length > 0) {\n          clearInterval(interval);\n          resolve(track.cues);\n        }\n      }, 2);\n    });\n  }\n  #youtubeAdjustments(cues) {\n    this.#captions.cues.splice(1, 1);\n    let newCues;\n    newCues = cues.map((cue, index) => {\n      if (cue.text.length > 0 && index !== 1) {\n        cue.text.shift();\n      }\n      return cue;\n    });\n    newCues = cues.filter((cue) => cue.text.length !== 0);\n    newCues = cues.filter((cue) => cue.text[0] && cue.text[0].length !== 0);\n    return newCues;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "dist/captions-viewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/captions-viewer.min.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "d",
          "default": "class extends HTMLElement{#k=!1;#t;#l=\"\";#r=0;#u=\"400px\";#o=4e3;#v=!1;#g=\"\";#h=\"\";#d=\"\";#p=!1;#f=!0;#e={};#n=void 0;#i=!1;#b=!1;#a={};#x=5;#c=.5;#T=!1;css=w();constructor(){super(),this.isConnected&&this.#S()}static get observedAttributes(){return[\"src\",\"playhead\",\"height\",\"debounce\",\"singleline\",\"color\",\"disable\",\"spacer\"]}attributeChangedCallback(t,r,e){if(t===\"playhead\"){this.#y(e);return}if(t===\"debounce\"){this.#o=e;return}this.#m({changes:{name:t,oldValue:r,newValue:e}})}set debounce(t){if(typeof t!=\"number\"){console.warn(\"debounce must be a number.\",t),this.#s(\"error\",\"debounce must be a number.\");return}t?this.setAttribute(\"debounce\",t):this.removeAttribute(\"debounce\")}set debounceScrolling(t){if(typeof t!=\"boolean\"){console.warn(\"debounceScrolling must be a boolean.\",t),this.#s(\"error\",\"debounceScrolling must be a boolean.\");return}this.#i=t}set disable(t){if(typeof t!=\"string\"){console.warn(\"Disable must be a string.\",t),this.#s(\"error\",\"Disable must be a string.\");return}this.setAttribute(\"disable\",t),t?this.setAttribute(\"disable\",t):this.removeAttribute(\"disabled\")}set playhead(t){if(typeof t!=\"number\"){console.warn(\"playhead property must be a number.\",t),this.#s(\"error\",\"playhead must be a number.\");return}this.setAttribute(\"playhead\",t)}set height(t){if(typeof t!=\"string\"){console.warn(\"height must be a string with a unit value.\",t),this.#s(\"error\",\"height must be a string with a unit value.\");return}this.setAttribute(\"height\",t)}set nudge(t){if(typeof t!=\"number\"){console.warn(\"nudge must be a number.\",t),this.#s(\"error\",\"nudge must be a number\");return}this.#c=t}set singleline(t){if(typeof t!=\"boolean\"){console.warn(\"singleline must be a boolean.\",t),this.#s(\"error\",\"singleline must be a boolean.\");return}this.setAttribute(\"singleline\",t)}set spacer(t){if(typeof t!=\"number\"){console.warn(\"spacer must be a number.\",t),this.#s(\"error\",\"spacer must be a number.\");return}this.#x=t}set src(t){if(typeof t!=\"string\"){console.warn(\"src must be a string.\",t),this.#s(\"error\",\"src must be a string.\");return}t?this.setAttribute(\"src\",t):this.removeAttribute(\"src\")}set textTrack(t){this.#a=t,this.#m({changes:{name:\"textTrack\"}})}set youtube(t){if(typeof t!=\"boolean\"){console.warn(\"youtube must be a boolean.\",t),this.#s(\"error\",\"youtube must be a boolean.\");return}this.#p=t}get captions(){return this.#e}get debounce(){return this.#o}get disable(){return this.#h}get enableCSS(){return this.#f}get height(){return this.#u}get nudge(){return this.#c}get paused(){return this.#b}get playhead(){return this.#r}get singleline(){return this.#v}get spacer(){return this.#x}get src(){return this.#l}get textTrack(){return this.#a}get theme(){return this.#d}get youtube(){return this.#p}connectedCallback(){this.#S()}#S(){if(this.#k){this.#m();return}this.#k=!0;let t=document.createElement(\"template\");t.innerHTML=`\n      ${this.css}\n      <captionselement id=\"root\" data-theme=\"\"></captionselement>\n    `;let r=t.content.cloneNode(!0);this.appendChild(r),this.#t={root:this.querySelector(\"#root\"),empty:this.querySelector(\"captions-viewer-empty\")},this.#t.root.addEventListener(\"click\",e=>{let s=e.composedPath()[0].closest(\"button\");if(s&&\"localName\"in s&&s.localName===\"button\"){let i=s.dataset.start;this.#s(\"seek\",i),this.#y(i+.2)}}),this.#L(),this.#m()}async#m(t){if(this.#l=this.getAttribute(\"src\")||this.#l,this.#r=parseInt(this.getAttribute(\"playhead\"),10)||this.#r,this.#u=this.getAttribute(\"height\")||this.#u,this.#o=parseInt(this.getAttribute(\"debounce\"),10)||this.#o,this.#v=this.getAttribute(\"singleline\")===\"true\"||this.getAttribute(\"singleline\")===!0||!1,this.#g=this.getAttribute(\"color\")||this.#g,this.#h=this.getAttribute(\"disable\")||\"\",this.#d=this.getAttribute(\"theme\")||this.#d,this.#p=this.getAttribute(\"youtube\")===\"true\"||this.getAttribute(\"youtube\")===!0||this.#p,this.#f=this.getAttribute(\"stylesheet\")||this.#f,!this.#l&&!(this.#a&&\"id\"in this.#a)){this.#E();return}if(this.#f===\"false\"||this.#f===!1){let e=this.querySelector(\"#theme_a\");e.innerHTML=\"\"}this.setTheme();let r=[];if(this.#u!==\"400px\"&&r.push(`height: ${this.#u}`),this.#g&&r.push(`--base: ${this.#g}`),this.#t.root?.setAttribute(\"style\",r.join(\"; \")),t?.changes.name===\"src\"||t?.changes.name===\"textTrack\"){if(this.#e=await this.#C(this.#a,this.#l),!this.#e||!this.#e.cues)return;this.#s(\"parsed\",\"Caption file has been parsed.\",this.#e),this.#p&&(this.#e.cues=this.#H(this.#e.cues)),this.#w(),this.#y(this.#r+.9)}this.#N(),this.#t.root.innerHTML=this.#$(this.#e)}async#C(t,r){let e,s=t;if(r&&l.getSupportedFileType(r)===\"vtt\"&&(s=await this.#q(r)),s&&\"cues\"in s&&(e=b(s)),r&&(!e||!e.cues)){let i=await fetch(r).then(c=>c.text()),a=l.getSupportedFileType(r);i&&(e=T(i,a))}if(!e||!e.cues){console.error(\"Not able to find and render captions.\",e),this.#E();return}return e.cues=m(e.cues),e.cues=x(e.cues),e.cues=y(e.cues,this.#x),e.cues=v(e.cues),this.#a=s,e}#L(){let t=!1,r,e=()=>{this.#t.root.classList.add(\"scrolling\")},s=()=>{this.#t.root.classList.remove(\"scrolling\")};this.#t.root.addEventListener(\"touchstart\",()=>{t=!0,this.#i=!0,clearTimeout(r),e()}),this.#t.root.addEventListener(\"touchend\",()=>{t=!1,r=setTimeout(()=>{t=!1,this.#i=!1,s()},this.#o)}),setTimeout(()=>{this.#t.root.addEventListener(\"scroll\",()=>{t||this.#T||(this.#i===!0&&clearTimeout(r),this.#i=!0,e(),r=setTimeout(()=>{this.#i=!1,s()},this.#o))},!1)},1e3)}#y(t){if(this.#b||(this.#r=t,!this.#e||!this.#e.cues))return;this.#w();let r=this.#e.cues?.findIndex(s=>s.status===\"active\");if(this.#e.cues?.forEach((s,i)=>{if(s.type===\"spacer\"&&s.status===\"active\"){let a=Math.round(this.#r-s.seconds.start),c=this.#t.root.querySelector(`[data-progress=\"${i}\"]`);c&&a&&(c.value=a)}}),this.#t.root.querySelectorAll(\".active\")?.forEach(s=>{let{index:i}=s.dataset,a=this.#e.cues[i];if(a.subCues){let c=s.querySelector(\".text\");c.innerHTML=a.subCues.map(h=>`<span class=\"${h.status}\">${h.text}</span>`).join(\"\")}}),r===this.#n)return;this.#n=r,this.#s(\"cuechange\",this.#e.cues[this.#n]);let e=this.#t.root.querySelectorAll(\"[data-progress]\");if(e&&[...e].forEach(s=>{let i=s;i.value=0}),this.#i){let i=this.#t.root.querySelectorAll(\"[data-index]\")[this.#n];i&&(d.isElementInViewport(i,\"captionselement\")||(this.#i=!1))}this.#I(),this.#M()}static isElementInViewport(t,r){let e=t.getBoundingClientRect(),i=t.closest(r).getBoundingClientRect();return e.bottom<=i.bottom}#$(t){if(!t)return\"\";let r=this.#h?this.#h.split(\"|\"):[],e=\"<ol>\";return t.cues?.forEach((s,i)=>{e+=this.#A(s,i,r)}),e+=\"</ol>\",e}#A(t,r,e){if(!t.timecode)return\"\";let s=t.status||\"\",i=`<span class=\"timecode\">${l.prettyTimecode(t.timecode.start)}</span>`,a=t.chapter?`<span class=\"chapter\">${t.chapter}</span>`:\"\",c=this.#v?\" \":\"<br />\",h=\"\";t.type===\"spacer\"&&(h=`<progress max=\"${Math.round(t.seconds.end-t.seconds.start)}\" value=\"0\" data-progress=\"${r}\"></progress>`);let n=`<span class=\"text\">${t.text.join(c)}</span>`;return t.subCues&&(n='<span class=\"text\">',n+=t.subCues.map(u=>`<span class=\"${u.status}\">${u.text}</span>`).join(\"\"),n+=\"</span>\"),`<li class=\"cueitem\">\n      <button\n        type=\"button\"\n        tabindex=\"0\"\n        data-start=\"${t.seconds.start}\"\n        class=\"cue ${s} ${t.type||\"\"}\"\n        data-index=\"${r}\"\n      >${!e.includes(\"timecode\")&&t.type!==\"spacer\"?i:\"\"} ${e.includes(\"chapters\")?\"\":a} ${e.includes(\"text\")?\"\":n} ${h}\n      </button></li>`}#I(){this.#t.root.querySelectorAll(\".cueitem\").forEach((r,e)=>{let s=this.#e.cues[e];r.firstElementChild.classList.remove(\"upcoming\",\"next\",\"active\",\"previous\",\"passed\"),r.firstElementChild.classList.add(s?.status)})}#w(){if(!this.#e||!(\"cues\"in this.#e))return;this.#e.cues=this.#e.cues.map(e=>(e.seconds.end-this.#c<this.#r&&(e.active=!1,e.status=\"passed\"),e.seconds.start-this.#c>this.#r&&(e.active=!1,e.status=\"upcoming\"),e.seconds.start-this.#c<this.#r&&e.seconds.end-this.#c>this.#r&&(e.active=!0,e.status=\"active\"),e));let t=this.#e.cues.filter(e=>e.status===\"passed\"),r=this.#e.cues.findIndex(e=>e.status===\"upcoming\");r>0&&(this.#e.cues[r].status=\"next\"),t&&t.length>0&&(this.#e.cues[t.length-1].status=\"previous\"),this.#e.cues=this.#e.cues.map(e=>(e.subCues&&e.subCues.map(s=>(s.status=s.seconds<this.#r?\"sub_active\":\"sub_upcoming\",s)),e))}#M(){if(!this.#n||this.#n<0||this.#i)return;let r=this.#t.root.querySelectorAll(\"li\")[this.#n];if(!r)return;let e=r.offsetHeight,s=r.offsetTop;this.#t.root.scrollTop=s-e,this.#T=!0,setTimeout(()=>{this.#T=!1},1e3)}#E(){if(this.#t.root.classList.add(\"hidden\"),!this.#t.empty){this.#t.root.innerHTML=\"\";return}if(this.#t.empty.innerHTML===\"\"){this.#t.empty.innerHTML=\"No captions.\";return}this.#t.empty.classList.remove(\"hidden\")}#N(){this.#t.empty.classList.add(\"hidden\")}pause(){this.#b=!this.#b}setTheme(t=void 0){let r=l.getTheme(t||this.#d||\"\");this.#d=r,this.#t.root.dataset.theme=r}async updateCues(t){if(!t)return\"\";let r=this.#e.cues?this.#e.cues.length:0;if(t.cues.length<=r)return\"\";let e=await this.#C(t);this.#e.cues=e.cues,this.#w(),e.cues.splice(0,r);let s=\"\";e.cues.forEach((a,c)=>{s+=this.#A(a,c+r,this.#h)});let i=this.#t.root.querySelector(\"ol\");return i&&(i.innerHTML+=s),i||(this.#t.root.innerHTML=`<ol>${s}</ol>`),this.#y(this.#r),s}#s(t,r,e){this.dispatchEvent(new CustomEvent(\"all\",{detail:{name:t,value:r,full:e}})),this.dispatchEvent(new CustomEvent(t,{detail:{value:r,full:e}}))}async#q(t){if(!this.#t.root.querySelector(\"#tempVid\")){let s=document.createElement(\"track\");s.mode=\"active\",s.default=!0,s.src=t;let i=document.createElement(\"video\");i.preload=\"auto\",i.setAttribute(\"id\",\"tempVid\"),i.appendChild(s),this.#t.root.appendChild(i)}let r=this.#t.root.querySelector(\"#tempVid\"),e=await d.trackReady(r).catch(s=>console.warn(s));return await d.cuesReady(e).catch(s=>console.warn(s)),r.textTracks[0]}async setTrack(t,r){let e=await d.trackReady(t,r).catch(()=>{});return e?(e.mode=\"hidden\",await d.cuesReady(e),this.textTrack=e,e.addEventListener(\"cuechange\",s=>{this.updateCues(s.target)}),e):new Error(\"No subtitle track found.\",t.textTracks)}static trackReady(t,r){let e=0;return new Promise((s,i)=>{let a=setInterval(()=>{e+=1,e>1e3&&(clearInterval(a),i(new Error(\"No tracks found in time.\")));let c=Array.from(t.textTracks);if(c.length>0){let h=r?c.find(n=>n.language===r):c.find(n=>n.kind===\"captions\"||n.kind===\"subtitles\");h&&(clearInterval(a),s(h))}},2)})}static cuesReady(t){let r=0;return new Promise((e,s)=>{let i=setInterval(()=>{r+=1,r>1e3&&(clearInterval(i),s(new Error(\"No cues found in time.\"))),t.cues&&t.cues.length>0&&(clearInterval(i),e(t.cues))},2)})}#H(t){this.#e.cues.splice(1,1);let r;return r=t.map((e,s)=>(e.text.length>0&&s!==1&&e.text.shift(),e)),r=t.filter(e=>e.text.length!==0),r=t.filter(e=>e.text[0]&&e.text[0].length!==0),r}}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "captions-viewer",
          "declaration": {
            "name": "d",
            "module": "dist/captions-viewer.min.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/CaptionsViewer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CaptionsViewer",
          "members": [
            {
              "kind": "field",
              "name": "#isInit",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#divs",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#src",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#playhead",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#height",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "'400px'"
            },
            {
              "kind": "field",
              "name": "#debounce",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "4000"
            },
            {
              "kind": "field",
              "name": "#singleline",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#color",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#disable",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#theme",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#youtube",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#enableCSS",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#captions",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#currentCue",
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "#debounceScrolling",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#paused",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#textTrack",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#spacer",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "5"
            },
            {
              "kind": "field",
              "name": "#nudge",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0.5"
            },
            {
              "kind": "field",
              "name": "#isAutoScroll",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "css"
            },
            {
              "kind": "field",
              "name": "debounce"
            },
            {
              "kind": "field",
              "name": "debounceScrolling"
            },
            {
              "kind": "field",
              "name": "disable"
            },
            {
              "kind": "field",
              "name": "playhead"
            },
            {
              "kind": "field",
              "name": "height"
            },
            {
              "kind": "field",
              "name": "nudge"
            },
            {
              "kind": "field",
              "name": "singleline"
            },
            {
              "kind": "field",
              "name": "spacer"
            },
            {
              "kind": "field",
              "name": "src"
            },
            {
              "kind": "field",
              "name": "textTrack"
            },
            {
              "kind": "field",
              "name": "youtube"
            },
            {
              "kind": "field",
              "name": "captions"
            },
            {
              "kind": "field",
              "name": "enableCSS"
            },
            {
              "kind": "field",
              "name": "paused"
            },
            {
              "kind": "field",
              "name": "theme"
            },
            {
              "kind": "method",
              "name": "#init"
            },
            {
              "kind": "method",
              "name": "#create",
              "parameters": [
                {
                  "name": "params"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#parse",
              "parameters": [
                {
                  "name": "TEXTTRACK"
                },
                {
                  "name": "SRC"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#iniScrollingEvents"
            },
            {
              "kind": "method",
              "name": "#updateCaptionStatus",
              "parameters": [
                {
                  "name": "playhead"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isElementInViewport",
              "static": true,
              "parameters": [
                {
                  "name": "el"
                },
                {
                  "name": "container"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderAllCaptions",
              "parameters": [
                {
                  "name": "captions"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#cueToHTML",
              "parameters": [
                {
                  "name": "cue"
                },
                {
                  "name": "index"
                },
                {
                  "name": "disabled"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#updateCaption"
            },
            {
              "kind": "method",
              "name": "#setCuesStatus"
            },
            {
              "kind": "method",
              "name": "#scrollToCue"
            },
            {
              "kind": "method",
              "name": "#displayNoCaptions"
            },
            {
              "kind": "method",
              "name": "#removeNoCaptions"
            },
            {
              "kind": "method",
              "name": "pause"
            },
            {
              "kind": "method",
              "name": "setTheme",
              "parameters": [
                {
                  "name": "userPreference",
                  "default": "undefined"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateCues",
              "parameters": [
                {
                  "name": "textTrack"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#event",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "value"
                },
                {
                  "name": "object"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderCaptionSrc",
              "parameters": [
                {
                  "name": "src"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setTrack",
              "parameters": [
                {
                  "name": "player"
                },
                {
                  "name": "lang"
                }
              ]
            },
            {
              "kind": "method",
              "name": "trackReady",
              "static": true,
              "parameters": [
                {
                  "name": "video"
                },
                {
                  "name": "lang"
                }
              ]
            },
            {
              "kind": "method",
              "name": "cuesReady",
              "static": true,
              "parameters": [
                {
                  "name": "track"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#youtubeAdjustments",
              "parameters": [
                {
                  "name": "cues"
                }
              ]
            }
          ],
          "events": [
            {
              "name": "all",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "src"
            },
            {
              "name": "playhead"
            },
            {
              "name": "height"
            },
            {
              "name": "debounce"
            },
            {
              "name": "singleline"
            },
            {
              "name": "color"
            },
            {
              "name": "disable"
            },
            {
              "name": "spacer"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "captions-viewer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CaptionsViewer",
          "declaration": {
            "name": "CaptionsViewer",
            "module": "src/CaptionsViewer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/defautStylesheet.js",
      "declarations": [
        {
          "kind": "function",
          "name": "defaultStyles"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultStyles",
          "declaration": {
            "name": "defaultStyles",
            "module": "src/defautStylesheet.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/parsers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parseTextTrack",
          "parameters": [
            {
              "name": "textTrack"
            }
          ]
        },
        {
          "kind": "function",
          "name": "parseSubTextCues",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        },
        {
          "kind": "function",
          "name": "addCueSpaces",
          "parameters": [
            {
              "name": "cues"
            },
            {
              "name": "distance"
            }
          ]
        },
        {
          "kind": "function",
          "name": "sortCues",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeDuplicateCues",
          "parameters": [
            {
              "name": "cues"
            }
          ]
        },
        {
          "kind": "function",
          "name": "parseVTT",
          "parameters": [
            {
              "name": "contents"
            },
            {
              "name": "type"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseTextTrack",
          "declaration": {
            "name": "parseTextTrack",
            "module": "src/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "parseSubTextCues",
          "declaration": {
            "name": "parseSubTextCues",
            "module": "src/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "addCueSpaces",
          "declaration": {
            "name": "addCueSpaces",
            "module": "src/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "sortCues",
          "declaration": {
            "name": "sortCues",
            "module": "src/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "removeDuplicateCues",
          "declaration": {
            "name": "removeDuplicateCues",
            "module": "src/parsers.js"
          }
        },
        {
          "kind": "js",
          "name": "parseVTT",
          "declaration": {
            "name": "parseVTT",
            "module": "src/parsers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Utilities",
          "members": [
            {
              "kind": "method",
              "name": "timecodeToSeconds",
              "static": true,
              "parameters": [
                {
                  "name": "timecode",
                  "default": "''"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isValidJSON",
              "static": true,
              "parameters": [
                {
                  "name": "input"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isTimecode",
              "static": true,
              "parameters": [
                {
                  "name": "input"
                }
              ]
            },
            {
              "kind": "method",
              "name": "prettyTimecode",
              "static": true,
              "parameters": [
                {
                  "name": "timecode"
                }
              ]
            },
            {
              "kind": "method",
              "name": "secondsToTimecode",
              "static": true,
              "parameters": [
                {
                  "name": "seconds",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTheme",
              "static": true,
              "parameters": [
                {
                  "name": "userPreference"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getSupportedFileType",
              "static": true,
              "parameters": [
                {
                  "name": "file"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Utilities",
            "module": "src/utilities.js"
          }
        }
      ]
    }
  ]
}
